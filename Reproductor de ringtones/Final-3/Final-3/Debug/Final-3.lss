
Final-3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000024c  00800100  00000c6c  00000d00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000113  0080034c  0080034c  00000f4c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019e5  00000000  00000000  0000118c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb6  00000000  00000000  00002b71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fb8  00000000  00000000  00003727  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000390  00000000  00000000  000046e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000871  00000000  00000000  00004a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d4  00000000  00000000  000052e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  000057b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__vector_14>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <__vector_18>
  4c:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__vector_19>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0f 04       	cpc	r0, r15
  6a:	13 04       	cpc	r1, r3
  6c:	fc 03       	fmulsu	r23, r20
  6e:	ff 03       	fmulsu	r23, r23
  70:	03 04       	cpc	r0, r3
  72:	07 04       	cpc	r0, r7
  74:	0b 04       	cpc	r0, r11

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	13 e0       	ldi	r17, 0x03	; 3
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	ec e6       	ldi	r30, 0x6C	; 108
  8a:	fc e0       	ldi	r31, 0x0C	; 12
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	ac 34       	cpi	r26, 0x4C	; 76
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	24 e0       	ldi	r18, 0x04	; 4
  9a:	ac e4       	ldi	r26, 0x4C	; 76
  9c:	b3 e0       	ldi	r27, 0x03	; 3
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	af 35       	cpi	r26, 0x5F	; 95
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 08 01 	call	0x210	; 0x210 <main>
  ac:	0c 94 34 06 	jmp	0xc68	; 0xc68 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <imprimirCanciones>:
}


static void imprimirCanciones(){
	
	UART_Send_String_To_Transmit("1- The Simpsons");
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	91 e0       	ldi	r25, 0x01	; 1
  b8:	0e 94 07 05 	call	0xa0e	; 0xa0e <UART_Send_String_To_Transmit>
	UART_Send_String_To_Transmit("\r\n");
  bc:	86 e9       	ldi	r24, 0x96	; 150
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	0e 94 07 05 	call	0xa0e	; 0xa0e <UART_Send_String_To_Transmit>
	UART_Send_String_To_Transmit("2- MissionImp");
  c4:	83 e1       	ldi	r24, 0x13	; 19
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	0e 94 07 05 	call	0xa0e	; 0xa0e <UART_Send_String_To_Transmit>
	UART_Send_String_To_Transmit("\r\n");
  cc:	86 e9       	ldi	r24, 0x96	; 150
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	0e 94 07 05 	call	0xa0e	; 0xa0e <UART_Send_String_To_Transmit>
	UART_Send_String_To_Transmit("3- Batman");
  d4:	81 e2       	ldi	r24, 0x21	; 33
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	0e 94 07 05 	call	0xa0e	; 0xa0e <UART_Send_String_To_Transmit>
	UART_Send_String_To_Transmit("\r\n");
  dc:	86 e9       	ldi	r24, 0x96	; 150
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	0e 94 07 05 	call	0xa0e	; 0xa0e <UART_Send_String_To_Transmit>
	UART_Send_String_To_Transmit("4- Pinkpanther");
  e4:	8b e2       	ldi	r24, 0x2B	; 43
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	0e 94 07 05 	call	0xa0e	; 0xa0e <UART_Send_String_To_Transmit>
	UART_Send_String_To_Transmit("\r\n");
  ec:	86 e9       	ldi	r24, 0x96	; 150
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	0e 94 07 05 	call	0xa0e	; 0xa0e <UART_Send_String_To_Transmit>
	UART_Send_String_To_Transmit("5- Adamsfamily");
  f4:	8a e3       	ldi	r24, 0x3A	; 58
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	0e 94 07 05 	call	0xa0e	; 0xa0e <UART_Send_String_To_Transmit>
	UART_Send_String_To_Transmit("\r\n");
  fc:	86 e9       	ldi	r24, 0x96	; 150
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	0e 94 07 05 	call	0xa0e	; 0xa0e <UART_Send_String_To_Transmit>
	UART_Send_String_To_Transmit("6- Argentina");
 104:	89 e4       	ldi	r24, 0x49	; 73
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	0e 94 07 05 	call	0xa0e	; 0xa0e <UART_Send_String_To_Transmit>
	UART_Send_String_To_Transmit("\r\n");
 10c:	86 e9       	ldi	r24, 0x96	; 150
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	0e 94 07 05 	call	0xa0e	; 0xa0e <UART_Send_String_To_Transmit>
	UART_Send_String_To_Transmit("7- Indiana");
 114:	86 e5       	ldi	r24, 0x56	; 86
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	0e 94 07 05 	call	0xa0e	; 0xa0e <UART_Send_String_To_Transmit>
	UART_Send_String_To_Transmit("\r\n");
 11c:	86 e9       	ldi	r24, 0x96	; 150
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 07 05 	call	0xa0e	; 0xa0e <UART_Send_String_To_Transmit>
	UART_Send_String_To_Transmit("\r\n");
 124:	86 e9       	ldi	r24, 0x96	; 150
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	0e 94 07 05 	call	0xa0e	; 0xa0e <UART_Send_String_To_Transmit>
 12c:	08 95       	ret

0000012e <invalidCommandMessage>:


static char buffer[100];
// Mensaje para cuando se realiza la verificación de los comandos recibidos.
void invalidCommandMessage() {
	strcpy(buffer, message5);
 12e:	85 e1       	ldi	r24, 0x15	; 21
 130:	e1 e6       	ldi	r30, 0x61	; 97
 132:	f1 e0       	ldi	r31, 0x01	; 1
 134:	ac e4       	ldi	r26, 0x4C	; 76
 136:	b3 e0       	ldi	r27, 0x03	; 3
 138:	01 90       	ld	r0, Z+
 13a:	0d 92       	st	X+, r0
 13c:	8a 95       	dec	r24
 13e:	e1 f7       	brne	.-8      	; 0x138 <invalidCommandMessage+0xa>
	UART_Send_String_To_Transmit(buffer);
 140:	8c e4       	ldi	r24, 0x4C	; 76
 142:	93 e0       	ldi	r25, 0x03	; 3
 144:	0e 94 07 05 	call	0xa0e	; 0xa0e <UART_Send_String_To_Transmit>
 148:	08 95       	ret

0000014a <welcomeMessage>:


// Mensaje de bienvenida (por única vez), indicando cuantas canciones tiene almacenado
// y una lista completa enumerada con el título (almacenar en memoria tipo ROM).
void welcomeMessage() {
	strcpy(buffer, "**************\r\n");
 14a:	81 e1       	ldi	r24, 0x11	; 17
 14c:	e6 e7       	ldi	r30, 0x76	; 118
 14e:	f1 e0       	ldi	r31, 0x01	; 1
 150:	ac e4       	ldi	r26, 0x4C	; 76
 152:	b3 e0       	ldi	r27, 0x03	; 3
 154:	01 90       	ld	r0, Z+
 156:	0d 92       	st	X+, r0
 158:	8a 95       	dec	r24
 15a:	e1 f7       	brne	.-8      	; 0x154 <welcomeMessage+0xa>
	UART_Send_String_To_Transmit(buffer);
 15c:	8c e4       	ldi	r24, 0x4C	; 76
 15e:	93 e0       	ldi	r25, 0x03	; 3
 160:	0e 94 07 05 	call	0xa0e	; 0xa0e <UART_Send_String_To_Transmit>
	strcpy(buffer,message6);
 164:	82 e1       	ldi	r24, 0x12	; 18
 166:	e7 e8       	ldi	r30, 0x87	; 135
 168:	f1 e0       	ldi	r31, 0x01	; 1
 16a:	ac e4       	ldi	r26, 0x4C	; 76
 16c:	b3 e0       	ldi	r27, 0x03	; 3
 16e:	01 90       	ld	r0, Z+
 170:	0d 92       	st	X+, r0
 172:	8a 95       	dec	r24
 174:	e1 f7       	brne	.-8      	; 0x16e <welcomeMessage+0x24>
	UART_Send_String_To_Transmit(buffer);
 176:	8c e4       	ldi	r24, 0x4C	; 76
 178:	93 e0       	ldi	r25, 0x03	; 3
 17a:	0e 94 07 05 	call	0xa0e	; 0xa0e <UART_Send_String_To_Transmit>
	strcpy(buffer, "**************\r\n");
 17e:	81 e1       	ldi	r24, 0x11	; 17
 180:	e6 e7       	ldi	r30, 0x76	; 118
 182:	f1 e0       	ldi	r31, 0x01	; 1
 184:	ac e4       	ldi	r26, 0x4C	; 76
 186:	b3 e0       	ldi	r27, 0x03	; 3
 188:	01 90       	ld	r0, Z+
 18a:	0d 92       	st	X+, r0
 18c:	8a 95       	dec	r24
 18e:	e1 f7       	brne	.-8      	; 0x188 <welcomeMessage+0x3e>
	UART_Send_String_To_Transmit(buffer);
 190:	8c e4       	ldi	r24, 0x4C	; 76
 192:	93 e0       	ldi	r25, 0x03	; 3
 194:	0e 94 07 05 	call	0xa0e	; 0xa0e <UART_Send_String_To_Transmit>
	UART_Send_String_To_Transmit("\r\n");
 198:	86 e9       	ldi	r24, 0x96	; 150
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	0e 94 07 05 	call	0xa0e	; 0xa0e <UART_Send_String_To_Transmit>
	imprimirCanciones();
 1a0:	0e 94 5a 00 	call	0xb4	; 0xb4 <imprimirCanciones>
 1a4:	08 95       	ret

000001a6 <optionsMessage>:
}

void optionsMessage() {
	strcpy(buffer, message1);
 1a6:	8b e2       	ldi	r24, 0x2B	; 43
 1a8:	e9 e9       	ldi	r30, 0x99	; 153
 1aa:	f1 e0       	ldi	r31, 0x01	; 1
 1ac:	ac e4       	ldi	r26, 0x4C	; 76
 1ae:	b3 e0       	ldi	r27, 0x03	; 3
 1b0:	01 90       	ld	r0, Z+
 1b2:	0d 92       	st	X+, r0
 1b4:	8a 95       	dec	r24
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <optionsMessage+0xa>
	UART_Send_String_To_Transmit(buffer);
 1b8:	8c e4       	ldi	r24, 0x4C	; 76
 1ba:	93 e0       	ldi	r25, 0x03	; 3
 1bc:	0e 94 07 05 	call	0xa0e	; 0xa0e <UART_Send_String_To_Transmit>
	strcpy(buffer, message2);
 1c0:	85 e3       	ldi	r24, 0x35	; 53
 1c2:	e4 ec       	ldi	r30, 0xC4	; 196
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	ac e4       	ldi	r26, 0x4C	; 76
 1c8:	b3 e0       	ldi	r27, 0x03	; 3
 1ca:	01 90       	ld	r0, Z+
 1cc:	0d 92       	st	X+, r0
 1ce:	8a 95       	dec	r24
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <optionsMessage+0x24>
	UART_Send_String_To_Transmit(buffer);
 1d2:	8c e4       	ldi	r24, 0x4C	; 76
 1d4:	93 e0       	ldi	r25, 0x03	; 3
 1d6:	0e 94 07 05 	call	0xa0e	; 0xa0e <UART_Send_String_To_Transmit>
	strcpy(buffer, message3);
 1da:	8c e3       	ldi	r24, 0x3C	; 60
 1dc:	e9 ef       	ldi	r30, 0xF9	; 249
 1de:	f1 e0       	ldi	r31, 0x01	; 1
 1e0:	ac e4       	ldi	r26, 0x4C	; 76
 1e2:	b3 e0       	ldi	r27, 0x03	; 3
 1e4:	01 90       	ld	r0, Z+
 1e6:	0d 92       	st	X+, r0
 1e8:	8a 95       	dec	r24
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <optionsMessage+0x3e>
	UART_Send_String_To_Transmit(buffer);
 1ec:	8c e4       	ldi	r24, 0x4C	; 76
 1ee:	93 e0       	ldi	r25, 0x03	; 3
 1f0:	0e 94 07 05 	call	0xa0e	; 0xa0e <UART_Send_String_To_Transmit>
	strcpy(buffer, message4);
 1f4:	80 e3       	ldi	r24, 0x30	; 48
 1f6:	e5 e3       	ldi	r30, 0x35	; 53
 1f8:	f2 e0       	ldi	r31, 0x02	; 2
 1fa:	ac e4       	ldi	r26, 0x4C	; 76
 1fc:	b3 e0       	ldi	r27, 0x03	; 3
 1fe:	01 90       	ld	r0, Z+
 200:	0d 92       	st	X+, r0
 202:	8a 95       	dec	r24
 204:	e1 f7       	brne	.-8      	; 0x1fe <optionsMessage+0x58>
	UART_Send_String_To_Transmit(buffer);
 206:	8c e4       	ldi	r24, 0x4C	; 76
 208:	93 e0       	ldi	r25, 0x03	; 3
 20a:	0e 94 07 05 	call	0xa0e	; 0xa0e <UART_Send_String_To_Transmit>
 20e:	08 95       	ret

00000210 <main>:


 int main(void)
 {
	 
	SerialPort_Init(BR9600); 		// Inicializo formato 8N1 y BAUDRATE = 9600bps
 210:	87 e6       	ldi	r24, 0x67	; 103
 212:	0e 94 c5 04 	call	0x98a	; 0x98a <SerialPort_Init>
	SerialPort_TX_Enable();			// Activo el Transmisor del Puerto Serie
 216:	0e 94 cf 04 	call	0x99e	; 0x99e <SerialPort_TX_Enable>
	SerialPort_RX_Enable();			// Activo el Receptor del Puerto Serie
 21a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable();	// Activo Interrupción de recepcion.
 21e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <SerialPort_RX_Interrupt_Enable>
	 
	sei();								// Activo la mascara global de interrupciones (Bit I del SREG en 1)
 222:	78 94       	sei
	
	TIMER1_Init();
 224:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <TIMER1_Init>
	TIMER0_Init();
 228:	0e 94 e7 04 	call	0x9ce	; 0x9ce <TIMER0_Init>
	MEF_init();
 22c:	0e 94 a5 01 	call	0x34a	; 0x34a <MEF_init>

	while(1)
	{
		UART_Update(); 
 230:	0e 94 35 05 	call	0xa6a	; 0xa6a <UART_Update>
		MEF_update();
 234:	0e 94 a8 01 	call	0x350	; 0x350 <MEF_update>
 238:	fb cf       	rjmp	.-10     	; 0x230 <main+0x20>

0000023a <handleInicio>:

void MEF_init() {
	estado_act = INICIO;
}

static void handleInicio() {
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
	if (!(strcmp(comando, "1") && strcmp(comando, "2") && strcmp(comando, "3") && strcmp(comando, "4") &&
 23e:	65 e6       	ldi	r22, 0x65	; 101
 240:	72 e0       	ldi	r23, 0x02	; 2
 242:	82 ec       	ldi	r24, 0xC2	; 194
 244:	93 e0       	ldi	r25, 0x03	; 3
 246:	0e 94 1c 06 	call	0xc38	; 0xc38 <strcmp>
 24a:	89 2b       	or	r24, r25
 24c:	41 f1       	breq	.+80     	; 0x29e <handleInicio+0x64>
 24e:	67 e6       	ldi	r22, 0x67	; 103
 250:	72 e0       	ldi	r23, 0x02	; 2
 252:	82 ec       	ldi	r24, 0xC2	; 194
 254:	93 e0       	ldi	r25, 0x03	; 3
 256:	0e 94 1c 06 	call	0xc38	; 0xc38 <strcmp>
 25a:	89 2b       	or	r24, r25
 25c:	01 f1       	breq	.+64     	; 0x29e <handleInicio+0x64>
 25e:	69 e6       	ldi	r22, 0x69	; 105
 260:	72 e0       	ldi	r23, 0x02	; 2
 262:	82 ec       	ldi	r24, 0xC2	; 194
 264:	93 e0       	ldi	r25, 0x03	; 3
 266:	0e 94 1c 06 	call	0xc38	; 0xc38 <strcmp>
 26a:	89 2b       	or	r24, r25
 26c:	c1 f0       	breq	.+48     	; 0x29e <handleInicio+0x64>
 26e:	6b e6       	ldi	r22, 0x6B	; 107
 270:	72 e0       	ldi	r23, 0x02	; 2
 272:	82 ec       	ldi	r24, 0xC2	; 194
 274:	93 e0       	ldi	r25, 0x03	; 3
 276:	0e 94 1c 06 	call	0xc38	; 0xc38 <strcmp>
 27a:	89 2b       	or	r24, r25
 27c:	81 f0       	breq	.+32     	; 0x29e <handleInicio+0x64>
	strcmp(comando, "5") && strcmp(comando, "6"))) {
 27e:	6d e6       	ldi	r22, 0x6D	; 109
 280:	72 e0       	ldi	r23, 0x02	; 2
 282:	82 ec       	ldi	r24, 0xC2	; 194
 284:	93 e0       	ldi	r25, 0x03	; 3
 286:	0e 94 1c 06 	call	0xc38	; 0xc38 <strcmp>
void MEF_init() {
	estado_act = INICIO;
}

static void handleInicio() {
	if (!(strcmp(comando, "1") && strcmp(comando, "2") && strcmp(comando, "3") && strcmp(comando, "4") &&
 28a:	89 2b       	or	r24, r25
 28c:	41 f0       	breq	.+16     	; 0x29e <handleInicio+0x64>
	strcmp(comando, "5") && strcmp(comando, "6"))) {
 28e:	6a e4       	ldi	r22, 0x4A	; 74
 290:	73 e0       	ldi	r23, 0x03	; 3
 292:	82 ec       	ldi	r24, 0xC2	; 194
 294:	93 e0       	ldi	r25, 0x03	; 3
 296:	0e 94 1c 06 	call	0xc38	; 0xc38 <strcmp>
void MEF_init() {
	estado_act = INICIO;
}

static void handleInicio() {
	if (!(strcmp(comando, "1") && strcmp(comando, "2") && strcmp(comando, "3") && strcmp(comando, "4") &&
 29a:	89 2b       	or	r24, r25
 29c:	71 f4       	brne	.+28     	; 0x2ba <handleInicio+0x80>
	strcmp(comando, "5") && strcmp(comando, "6"))) {
		if (estado_act == INICIO) {
 29e:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <estado_act>
 2a2:	81 11       	cpse	r24, r1
 2a4:	4f c0       	rjmp	.+158    	; 0x344 <handleInicio+0x10a>
			estado_act = LOAD;
 2a6:	84 e0       	ldi	r24, 0x04	; 4
 2a8:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <estado_act>
			song_select = atoi(comando); // <------------ Convierte de string a entero
 2ac:	82 ec       	ldi	r24, 0xC2	; 194
 2ae:	93 e0       	ldi	r25, 0x03	; 3
 2b0:	0e 94 fe 05 	call	0xbfc	; 0xbfc <atoi>
 2b4:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <song_select>
 2b8:	45 c0       	rjmp	.+138    	; 0x344 <handleInicio+0x10a>
		}
		} else if (!(strcmp(comando, "PLAY"))) {
 2ba:	6f e6       	ldi	r22, 0x6F	; 111
 2bc:	72 e0       	ldi	r23, 0x02	; 2
 2be:	82 ec       	ldi	r24, 0xC2	; 194
 2c0:	93 e0       	ldi	r25, 0x03	; 3
 2c2:	0e 94 1c 06 	call	0xc38	; 0xc38 <strcmp>
 2c6:	89 2b       	or	r24, r25
 2c8:	51 f4       	brne	.+20     	; 0x2de <handleInicio+0xa4>
		if (estado_act == STOP || estado_act == LOAD) {
 2ca:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <estado_act>
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	11 f0       	breq	.+4      	; 0x2d6 <handleInicio+0x9c>
 2d2:	84 30       	cpi	r24, 0x04	; 4
 2d4:	b9 f5       	brne	.+110    	; 0x344 <handleInicio+0x10a>
			estado_act = PLAYING;
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <estado_act>
 2dc:	33 c0       	rjmp	.+102    	; 0x344 <handleInicio+0x10a>
		}
		} else if ((!( strcmp(comando, "STOP"))) && estado_act == PLAYING) {
 2de:	64 e7       	ldi	r22, 0x74	; 116
 2e0:	72 e0       	ldi	r23, 0x02	; 2
 2e2:	82 ec       	ldi	r24, 0xC2	; 194
 2e4:	93 e0       	ldi	r25, 0x03	; 3
 2e6:	0e 94 1c 06 	call	0xc38	; 0xc38 <strcmp>
 2ea:	ec 01       	movw	r28, r24
 2ec:	89 2b       	or	r24, r25
 2ee:	41 f4       	brne	.+16     	; 0x300 <handleInicio+0xc6>
 2f0:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <estado_act>
 2f4:	82 30       	cpi	r24, 0x02	; 2
 2f6:	21 f4       	brne	.+8      	; 0x300 <handleInicio+0xc6>
		estado_act = STOP;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <estado_act>
 2fe:	22 c0       	rjmp	.+68     	; 0x344 <handleInicio+0x10a>
		} else if (!(strcmp(comando, "RESET"))) {
 300:	69 e7       	ldi	r22, 0x79	; 121
 302:	72 e0       	ldi	r23, 0x02	; 2
 304:	82 ec       	ldi	r24, 0xC2	; 194
 306:	93 e0       	ldi	r25, 0x03	; 3
 308:	0e 94 1c 06 	call	0xc38	; 0xc38 <strcmp>
 30c:	89 2b       	or	r24, r25
 30e:	31 f4       	brne	.+12     	; 0x31c <handleInicio+0xe2>
			flagInicio = 1;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			estado_act = INICIO;
 316:	10 92 f4 03 	sts	0x03F4, r1	; 0x8003f4 <estado_act>
 31a:	14 c0       	rjmp	.+40     	; 0x344 <handleInicio+0x10a>
		
		} else if ((!(strcmp(comando, "STOP"))) && estado_act == STOP) {
 31c:	20 97       	sbiw	r28, 0x00	; 0
 31e:	21 f4       	brne	.+8      	; 0x328 <handleInicio+0xee>
 320:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <estado_act>
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	71 f0       	breq	.+28     	; 0x344 <handleInicio+0x10a>
		// Nada
		} else if ((!(strcmp(comando, "STOP"))) && estado_act == INICIO) {
 328:	20 97       	sbiw	r28, 0x00	; 0
 32a:	21 f4       	brne	.+8      	; 0x334 <handleInicio+0xfa>
 32c:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <estado_act>
 330:	88 23       	and	r24, r24
 332:	41 f0       	breq	.+16     	; 0x344 <handleInicio+0x10a>
		// Nada
		} else if ((!(strcmp(comando, "STOP"))) && estado_act == LOAD) {
 334:	cd 2b       	or	r28, r29
 336:	21 f4       	brne	.+8      	; 0x340 <handleInicio+0x106>
 338:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <estado_act>
 33c:	84 30       	cpi	r24, 0x04	; 4
 33e:	11 f0       	breq	.+4      	; 0x344 <handleInicio+0x10a>
		// Nada
		} else {
		invalidCommandMessage();
 340:	0e 94 97 00 	call	0x12e	; 0x12e <invalidCommandMessage>
	}
}
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	08 95       	ret

0000034a <MEF_init>:
uint8_t flagInicio = 1;
char comando[50];
uint8_t song_select;

void MEF_init() {
	estado_act = INICIO;
 34a:	10 92 f4 03 	sts	0x03F4, r1	; 0x8003f4 <estado_act>
 34e:	08 95       	ret

00000350 <MEF_update>:
		invalidCommandMessage();
	}
}

void MEF_update() {
	switch (estado_act) {
 350:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <estado_act>
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	09 f4       	brne	.+2      	; 0x35a <MEF_update+0xa>
 358:	4f c0       	rjmp	.+158    	; 0x3f8 <MEF_update+0xa8>
 35a:	28 f0       	brcs	.+10     	; 0x366 <MEF_update+0x16>
 35c:	82 30       	cpi	r24, 0x02	; 2
 35e:	a9 f1       	breq	.+106    	; 0x3ca <MEF_update+0x7a>
 360:	84 30       	cpi	r24, 0x04	; 4
 362:	e9 f0       	breq	.+58     	; 0x39e <MEF_update+0x4e>
 364:	08 95       	ret
		case INICIO:
		if (flagInicio) {
 366:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 36a:	88 23       	and	r24, r24
 36c:	31 f0       	breq	.+12     	; 0x37a <MEF_update+0x2a>
			welcomeMessage();
 36e:	0e 94 a5 00 	call	0x14a	; 0x14a <welcomeMessage>
			optionsMessage();
 372:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <optionsMessage>
			flagInicio = 0;
 376:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		if (UART_Get_Flag() == 1) { // Si se recibio algo (comando) flag es 1
 37a:	0e 94 fe 04 	call	0x9fc	; 0x9fc <UART_Get_Flag>
 37e:	81 30       	cpi	r24, 0x01	; 1
 380:	09 f0       	breq	.+2      	; 0x384 <MEF_update+0x34>
 382:	4a c0       	rjmp	.+148    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
			UART_Set_flag(0);
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	0e 94 01 05 	call	0xa02	; 0xa02 <UART_Set_flag>
			strcpy(comando, UART_Get_String_From_Buffer());
 38a:	0e 94 04 05 	call	0xa08	; 0xa08 <UART_Get_String_From_Buffer>
 38e:	bc 01       	movw	r22, r24
 390:	82 ec       	ldi	r24, 0xC2	; 194
 392:	93 e0       	ldi	r25, 0x03	; 3
 394:	0e 94 25 06 	call	0xc4a	; 0xc4a <strcpy>
			handleInicio();
 398:	0e 94 1d 01 	call	0x23a	; 0x23a <handleInicio>
 39c:	08 95       	ret
		}
		break;
		case LOAD:
		if (UART_Get_Flag() == 1) {
 39e:	0e 94 fe 04 	call	0x9fc	; 0x9fc <UART_Get_Flag>
 3a2:	81 30       	cpi	r24, 0x01	; 1
 3a4:	61 f4       	brne	.+24     	; 0x3be <MEF_update+0x6e>
			UART_Set_flag(0);
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	0e 94 01 05 	call	0xa02	; 0xa02 <UART_Set_flag>
			strcpy(comando, UART_Get_String_From_Buffer());
 3ac:	0e 94 04 05 	call	0xa08	; 0xa08 <UART_Get_String_From_Buffer>
 3b0:	bc 01       	movw	r22, r24
 3b2:	82 ec       	ldi	r24, 0xC2	; 194
 3b4:	93 e0       	ldi	r25, 0x03	; 3
 3b6:	0e 94 25 06 	call	0xc4a	; 0xc4a <strcpy>
			handleInicio();
 3ba:	0e 94 1d 01 	call	0x23a	; 0x23a <handleInicio>
		}
		play_LoadSong(song_select - 1);
 3be:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <song_select>
 3c2:	81 50       	subi	r24, 0x01	; 1
 3c4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <play_LoadSong>
		break;
 3c8:	08 95       	ret
		case NO_VALID:
		// TO-DO
		break;
		case PLAYING:
		if (UART_Get_Flag() == 1) {
 3ca:	0e 94 fe 04 	call	0x9fc	; 0x9fc <UART_Get_Flag>
 3ce:	81 30       	cpi	r24, 0x01	; 1
 3d0:	61 f4       	brne	.+24     	; 0x3ea <MEF_update+0x9a>
			UART_Set_flag(0);
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	0e 94 01 05 	call	0xa02	; 0xa02 <UART_Set_flag>
			strcpy(comando, UART_Get_String_From_Buffer());
 3d8:	0e 94 04 05 	call	0xa08	; 0xa08 <UART_Get_String_From_Buffer>
 3dc:	bc 01       	movw	r22, r24
 3de:	82 ec       	ldi	r24, 0xC2	; 194
 3e0:	93 e0       	ldi	r25, 0x03	; 3
 3e2:	0e 94 25 06 	call	0xc4a	; 0xc4a <strcpy>
			handleInicio();
 3e6:	0e 94 1d 01 	call	0x23a	; 0x23a <handleInicio>
		}
		if ( !(play_note()) )
 3ea:	0e 94 b3 03 	call	0x766	; 0x766 <play_note>
 3ee:	81 11       	cpse	r24, r1
 3f0:	13 c0       	rjmp	.+38     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
		{
			estado_act = INICIO;
 3f2:	10 92 f4 03 	sts	0x03F4, r1	; 0x8003f4 <estado_act>
 3f6:	08 95       	ret
		}
		break;
		case STOP:
		if (UART_Get_Flag() == 1) {
 3f8:	0e 94 fe 04 	call	0x9fc	; 0x9fc <UART_Get_Flag>
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	61 f4       	brne	.+24     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
			UART_Set_flag(0);
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	0e 94 01 05 	call	0xa02	; 0xa02 <UART_Set_flag>
			strcpy(comando, UART_Get_String_From_Buffer());
 406:	0e 94 04 05 	call	0xa08	; 0xa08 <UART_Get_String_From_Buffer>
 40a:	bc 01       	movw	r22, r24
 40c:	82 ec       	ldi	r24, 0xC2	; 194
 40e:	93 e0       	ldi	r25, 0x03	; 3
 410:	0e 94 25 06 	call	0xc4a	; 0xc4a <strcpy>
			handleInicio();
 414:	0e 94 1d 01 	call	0x23a	; 0x23a <handleInicio>
 418:	08 95       	ret

0000041a <__vector_14>:
static unsigned int calc_duration;  // <------------------------------
static char *song; // <------------------------------

// Control de la duracion del sonido
ISR (TIMER0_COMPA_vect) // ISR para la interrupcion de comparacion del Timer 0
{
 41a:	1f 92       	push	r1
 41c:	0f 92       	push	r0
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	0f 92       	push	r0
 422:	11 24       	eor	r1, r1
 424:	8f 93       	push	r24
 426:	9f 93       	push	r25
	if (duration_timer) duration_timer--; // Decremento el timer si > 0
 428:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <duration_timer>
 42c:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <duration_timer+0x1>
 430:	00 97       	sbiw	r24, 0x00	; 0
 432:	31 f0       	breq	.+12     	; 0x440 <__vector_14+0x26>
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <duration_timer+0x1>
 43a:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <duration_timer>
 43e:	06 c0       	rjmp	.+12     	; 0x44c <__vector_14+0x32>
	else                                  // si timer es = 0
	{
		TCCR1A=0;	// Desactivo el timer 1
 440:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		sound_playing = 0;                  // Borro el flag para avisar que no hay una nota sonando
 444:	10 92 b9 03 	sts	0x03B9, r1	; 0x8003b9 <sound_playing+0x1>
 448:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <sound_playing>
	}
}
 44c:	9f 91       	pop	r25
 44e:	8f 91       	pop	r24
 450:	0f 90       	pop	r0
 452:	0f be       	out	0x3f, r0	; 63
 454:	0f 90       	pop	r0
 456:	1f 90       	pop	r1
 458:	18 95       	reti

0000045a <sound>:


// Saco el sonido por el PIN5 del PORTD: freq en Hz, dur en ms
void sound(unsigned int freq, unsigned int dur)
{
	while (sound_playing);      // Si hay algun sonido presente, espero a que termine
 45a:	40 91 b8 03 	lds	r20, 0x03B8	; 0x8003b8 <sound_playing>
 45e:	50 91 b9 03 	lds	r21, 0x03B9	; 0x8003b9 <sound_playing+0x1>
 462:	45 2b       	or	r20, r21
 464:	d1 f7       	brne	.-12     	; 0x45a <sound>
	
	duration_timer = dur;       // Seteo el tiempo de duracion
 466:	70 93 f9 03 	sts	0x03F9, r23	; 0x8003f9 <duration_timer+0x1>
 46a:	60 93 f8 03 	sts	0x03F8, r22	; 0x8003f8 <duration_timer>
	
	// Activo la salida y configuro el timer para que genere la seÃ±al de la frecuencia apropiada
	TCCR1A|=(1<<COM1A0);
 46e:	e0 e8       	ldi	r30, 0x80	; 128
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	20 81       	ld	r18, Z
 474:	20 64       	ori	r18, 0x40	; 64
 476:	20 83       	st	Z, r18
	
	// Actualizo el valor de OCR1A para que produzca la nota adecuada
	OCR1A=(8000000/(freq))-1;
 478:	9c 01       	movw	r18, r24
 47a:	40 e0       	ldi	r20, 0x00	; 0
 47c:	50 e0       	ldi	r21, 0x00	; 0
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	72 e1       	ldi	r23, 0x12	; 18
 482:	8a e7       	ldi	r24, 0x7A	; 122
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__divmodsi4>
 48a:	21 50       	subi	r18, 0x01	; 1
 48c:	31 09       	sbc	r19, r1
 48e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 492:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	sound_playing = 1;          // Activo el flag para avisar que hay una nota sonando
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	90 93 b9 03 	sts	0x03B9, r25	; 0x8003b9 <sound_playing+0x1>
 49e:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <sound_playing>
 4a2:	08 95       	ret

000004a4 <play_LoadSong>:
}

//Cargo la cancion seleccionada
void play_LoadSong(uint8_t selected_song){ // <------------------------------
	song = rtttl_library[selected_song]; // <------------------------------
 4a4:	e8 2f       	mov	r30, r24
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	ee 0f       	add	r30, r30
 4aa:	ff 1f       	adc	r31, r31
 4ac:	ef 5f       	subi	r30, 0xFF	; 255
 4ae:	fe 4f       	sbci	r31, 0xFE	; 254
 4b0:	80 81       	ld	r24, Z
 4b2:	91 81       	ldd	r25, Z+1	; 0x01
 4b4:	90 93 b1 03 	sts	0x03B1, r25	; 0x8003b1 <song+0x1>
 4b8:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <song>
	duration = 4;                 // Duracion estandar = 4/4 = 1 beat
 4bc:	84 e0       	ldi	r24, 0x04	; 4
 4be:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <duration>
	tempo = 63;                   // Tempo estandar = 63 bpm
 4c2:	8f e3       	ldi	r24, 0x3F	; 63
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	90 93 f6 03 	sts	0x03F6, r25	; 0x8003f6 <tempo+0x1>
 4ca:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <tempo>
	octave = 6;                   // Octava estandar = 6th
 4ce:	86 e0       	ldi	r24, 0x06	; 6
 4d0:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <octave>
	while (*song != ':') song++;  // Busca el primer ':'
 4d4:	05 c0       	rjmp	.+10     	; 0x4e0 <play_LoadSong+0x3c>
 4d6:	31 96       	adiw	r30, 0x01	; 1
 4d8:	f0 93 b1 03 	sts	0x03B1, r31	; 0x8003b1 <song+0x1>
 4dc:	e0 93 b0 03 	sts	0x03B0, r30	; 0x8003b0 <song>
 4e0:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <song>
 4e4:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <song+0x1>
 4e8:	80 81       	ld	r24, Z
 4ea:	8a 33       	cpi	r24, 0x3A	; 58
 4ec:	a1 f7       	brne	.-24     	; 0x4d6 <play_LoadSong+0x32>
	song++;                       // Saltea el primer ':'
 4ee:	31 96       	adiw	r30, 0x01	; 1
 4f0:	f0 93 b1 03 	sts	0x03B1, r31	; 0x8003b1 <song+0x1>
 4f4:	e0 93 b0 03 	sts	0x03B0, r30	; 0x8003b0 <song>
	while (*song!=':')            // Repite hasta encontrar ':'
 4f8:	28 c1       	rjmp	.+592    	; 0x74a <play_LoadSong+0x2a6>
	{
		if (*song == 'd')           // Entra si es el seteo de la duracion
 4fa:	84 36       	cpi	r24, 0x64	; 100
 4fc:	09 f0       	breq	.+2      	; 0x500 <play_LoadSong+0x5c>
 4fe:	50 c0       	rjmp	.+160    	; 0x5a0 <play_LoadSong+0xfc>
		{
			duration = 0;             // Seteo la duracion en cero (temporalmente)
 500:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <duration>
			song++;                   // Avanzo al proximo caracter
 504:	31 96       	adiw	r30, 0x01	; 1
 506:	f0 93 b1 03 	sts	0x03B1, r31	; 0x8003b1 <song+0x1>
 50a:	e0 93 b0 03 	sts	0x03B0, r30	; 0x8003b0 <song>
			while (*song == '=') song++;  // Salteo '='
 50e:	05 c0       	rjmp	.+10     	; 0x51a <play_LoadSong+0x76>
 510:	31 96       	adiw	r30, 0x01	; 1
 512:	f0 93 b1 03 	sts	0x03B1, r31	; 0x8003b1 <song+0x1>
 516:	e0 93 b0 03 	sts	0x03B0, r30	; 0x8003b0 <song>
 51a:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <song>
 51e:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <song+0x1>
 522:	80 81       	ld	r24, Z
 524:	8d 33       	cpi	r24, 0x3D	; 61
 526:	a1 f3       	breq	.-24     	; 0x510 <play_LoadSong+0x6c>
 528:	05 c0       	rjmp	.+10     	; 0x534 <play_LoadSong+0x90>
			while (*song == ' ') song++;  // Salteo los espacios
 52a:	31 96       	adiw	r30, 0x01	; 1
 52c:	f0 93 b1 03 	sts	0x03B1, r31	; 0x8003b1 <song+0x1>
 530:	e0 93 b0 03 	sts	0x03B0, r30	; 0x8003b0 <song>
 534:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <song>
 538:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <song+0x1>
 53c:	80 81       	ld	r24, Z
 53e:	80 32       	cpi	r24, 0x20	; 32
 540:	a1 f3       	breq	.-24     	; 0x52a <play_LoadSong+0x86>
			// Si el caracter es un numero, seteo la duracion
			if (*song>='0' && *song<='9') duration = *song - '0';
 542:	80 53       	subi	r24, 0x30	; 48
 544:	8a 30       	cpi	r24, 0x0A	; 10
 546:	10 f4       	brcc	.+4      	; 0x54c <play_LoadSong+0xa8>
 548:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <duration>
			song++;                   // Avanzo al proximo caracter
 54c:	9f 01       	movw	r18, r30
 54e:	2f 5f       	subi	r18, 0xFF	; 255
 550:	3f 4f       	sbci	r19, 0xFF	; 255
 552:	30 93 b1 03 	sts	0x03B1, r19	; 0x8003b1 <song+0x1>
 556:	20 93 b0 03 	sts	0x03B0, r18	; 0x8003b0 <song>
			// Me fijo si el caracter es un numero, ya que la duracion puede ser de dos digitos de largo
			if (*song>='0' && *song<='9')
 55a:	81 81       	ldd	r24, Z+1	; 0x01
 55c:	90 ed       	ldi	r25, 0xD0	; 208
 55e:	98 0f       	add	r25, r24
 560:	9a 30       	cpi	r25, 0x0A	; 10
 562:	b8 f4       	brcc	.+46     	; 0x592 <play_LoadSong+0xee>
			{ // Multiplico duracion por 10 y le agrego el valor del caracter
				duration = duration*10 + (*song - '0');
 564:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <duration>
 568:	99 0f       	add	r25, r25
 56a:	49 2f       	mov	r20, r25
 56c:	44 0f       	add	r20, r20
 56e:	44 0f       	add	r20, r20
 570:	94 0f       	add	r25, r20
 572:	89 0f       	add	r24, r25
 574:	80 53       	subi	r24, 0x30	; 48
 576:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <duration>
				song++;                 // Avanzo al proximo caracter
 57a:	2f 5f       	subi	r18, 0xFF	; 255
 57c:	3f 4f       	sbci	r19, 0xFF	; 255
 57e:	30 93 b1 03 	sts	0x03B1, r19	; 0x8003b1 <song+0x1>
 582:	20 93 b0 03 	sts	0x03B0, r18	; 0x8003b0 <song>
 586:	05 c0       	rjmp	.+10     	; 0x592 <play_LoadSong+0xee>
			}
			while (*song == ',') song++;  // Salteo ','
 588:	31 96       	adiw	r30, 0x01	; 1
 58a:	f0 93 b1 03 	sts	0x03B1, r31	; 0x8003b1 <song+0x1>
 58e:	e0 93 b0 03 	sts	0x03B0, r30	; 0x8003b0 <song>
 592:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <song>
 596:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <song+0x1>
 59a:	80 81       	ld	r24, Z
 59c:	8c 32       	cpi	r24, 0x2C	; 44
 59e:	a1 f3       	breq	.-24     	; 0x588 <play_LoadSong+0xe4>
		}
		
		if (*song == 'o')           // Entra si es el seteo de la octava
 5a0:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <song>
 5a4:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <song+0x1>
 5a8:	80 81       	ld	r24, Z
 5aa:	8f 36       	cpi	r24, 0x6F	; 111
 5ac:	c1 f5       	brne	.+112    	; 0x61e <play_LoadSong+0x17a>
		{
			octave = 0;               // Seteo la octava en cero (temporalmente)
 5ae:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <octave>
			song++;                   // Avanzo al proximo caracter
 5b2:	31 96       	adiw	r30, 0x01	; 1
 5b4:	f0 93 b1 03 	sts	0x03B1, r31	; 0x8003b1 <song+0x1>
 5b8:	e0 93 b0 03 	sts	0x03B0, r30	; 0x8003b0 <song>
			while (*song == '=') song++;  // Salteo '='
 5bc:	05 c0       	rjmp	.+10     	; 0x5c8 <play_LoadSong+0x124>
 5be:	31 96       	adiw	r30, 0x01	; 1
 5c0:	f0 93 b1 03 	sts	0x03B1, r31	; 0x8003b1 <song+0x1>
 5c4:	e0 93 b0 03 	sts	0x03B0, r30	; 0x8003b0 <song>
 5c8:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <song>
 5cc:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <song+0x1>
 5d0:	80 81       	ld	r24, Z
 5d2:	8d 33       	cpi	r24, 0x3D	; 61
 5d4:	a1 f3       	breq	.-24     	; 0x5be <play_LoadSong+0x11a>
 5d6:	05 c0       	rjmp	.+10     	; 0x5e2 <play_LoadSong+0x13e>
			while (*song == ' ') song++;  // Salteo los espacios
 5d8:	31 96       	adiw	r30, 0x01	; 1
 5da:	f0 93 b1 03 	sts	0x03B1, r31	; 0x8003b1 <song+0x1>
 5de:	e0 93 b0 03 	sts	0x03B0, r30	; 0x8003b0 <song>
 5e2:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <song>
 5e6:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <song+0x1>
 5ea:	80 81       	ld	r24, Z
 5ec:	80 32       	cpi	r24, 0x20	; 32
 5ee:	a1 f3       	breq	.-24     	; 0x5d8 <play_LoadSong+0x134>
			// Si el caracter es un numero, seteo la octava
			if (*song>='0' && *song<='9') octave = *song - '0';
 5f0:	80 53       	subi	r24, 0x30	; 48
 5f2:	8a 30       	cpi	r24, 0x0A	; 10
 5f4:	10 f4       	brcc	.+4      	; 0x5fa <play_LoadSong+0x156>
 5f6:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <octave>
			song++;                   // Avanzo al proximo caracter
 5fa:	31 96       	adiw	r30, 0x01	; 1
 5fc:	f0 93 b1 03 	sts	0x03B1, r31	; 0x8003b1 <song+0x1>
 600:	e0 93 b0 03 	sts	0x03B0, r30	; 0x8003b0 <song>
			while (*song == ',') song++;  // Salteo ','
 604:	05 c0       	rjmp	.+10     	; 0x610 <play_LoadSong+0x16c>
 606:	31 96       	adiw	r30, 0x01	; 1
 608:	f0 93 b1 03 	sts	0x03B1, r31	; 0x8003b1 <song+0x1>
 60c:	e0 93 b0 03 	sts	0x03B0, r30	; 0x8003b0 <song>
 610:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <song>
 614:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <song+0x1>
 618:	80 81       	ld	r24, Z
 61a:	8c 32       	cpi	r24, 0x2C	; 44
 61c:	a1 f3       	breq	.-24     	; 0x606 <play_LoadSong+0x162>
		}
		if (*song == 'b')           // Entra si es el seteo del tempo (beats por minuto)
 61e:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <song>
 622:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <song+0x1>
 626:	80 81       	ld	r24, Z
 628:	82 36       	cpi	r24, 0x62	; 98
 62a:	09 f0       	breq	.+2      	; 0x62e <play_LoadSong+0x18a>
 62c:	87 c0       	rjmp	.+270    	; 0x73c <play_LoadSong+0x298>
		{
			tempo = 0;                // Seteo el tempo en cero (temporalmente)
 62e:	10 92 f6 03 	sts	0x03F6, r1	; 0x8003f6 <tempo+0x1>
 632:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <tempo>
			song++;                   // Avanzo al proximo caracter
 636:	31 96       	adiw	r30, 0x01	; 1
 638:	f0 93 b1 03 	sts	0x03B1, r31	; 0x8003b1 <song+0x1>
 63c:	e0 93 b0 03 	sts	0x03B0, r30	; 0x8003b0 <song>
			while (*song == '=') song++;  // Salteo '='
 640:	05 c0       	rjmp	.+10     	; 0x64c <play_LoadSong+0x1a8>
 642:	31 96       	adiw	r30, 0x01	; 1
 644:	f0 93 b1 03 	sts	0x03B1, r31	; 0x8003b1 <song+0x1>
 648:	e0 93 b0 03 	sts	0x03B0, r30	; 0x8003b0 <song>
 64c:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <song>
 650:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <song+0x1>
 654:	80 81       	ld	r24, Z
 656:	8d 33       	cpi	r24, 0x3D	; 61
 658:	a1 f3       	breq	.-24     	; 0x642 <play_LoadSong+0x19e>
 65a:	05 c0       	rjmp	.+10     	; 0x666 <play_LoadSong+0x1c2>
			while (*song == ' ') song++;  // Salteo los espacios
 65c:	31 96       	adiw	r30, 0x01	; 1
 65e:	f0 93 b1 03 	sts	0x03B1, r31	; 0x8003b1 <song+0x1>
 662:	e0 93 b0 03 	sts	0x03B0, r30	; 0x8003b0 <song>
 666:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <song>
 66a:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <song+0x1>
 66e:	80 81       	ld	r24, Z
 670:	80 32       	cpi	r24, 0x20	; 32
 672:	a1 f3       	breq	.-24     	; 0x65c <play_LoadSong+0x1b8>
			// Ahora leo el seteo del tempo (puede tener 3 digitos de largo)
			if (*song>='0' && *song<='9') tempo = *song - '0';
 674:	90 ed       	ldi	r25, 0xD0	; 208
 676:	98 0f       	add	r25, r24
 678:	9a 30       	cpi	r25, 0x0A	; 10
 67a:	30 f4       	brcc	.+12     	; 0x688 <play_LoadSong+0x1e4>
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	c0 97       	sbiw	r24, 0x30	; 48
 680:	90 93 f6 03 	sts	0x03F6, r25	; 0x8003f6 <tempo+0x1>
 684:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <tempo>
			song++;                   // Avanzo al proximo caracter
 688:	df 01       	movw	r26, r30
 68a:	11 96       	adiw	r26, 0x01	; 1
 68c:	b0 93 b1 03 	sts	0x03B1, r27	; 0x8003b1 <song+0x1>
 690:	a0 93 b0 03 	sts	0x03B0, r26	; 0x8003b0 <song>
			if (*song>='0' && *song<='9')
 694:	41 81       	ldd	r20, Z+1	; 0x01
 696:	80 ed       	ldi	r24, 0xD0	; 208
 698:	84 0f       	add	r24, r20
 69a:	8a 30       	cpi	r24, 0x0A	; 10
 69c:	08 f0       	brcs	.+2      	; 0x6a0 <play_LoadSong+0x1fc>
 69e:	41 c0       	rjmp	.+130    	; 0x722 <play_LoadSong+0x27e>
			{
				tempo = tempo*10 + (*song - '0'); // El tempo tiene dos digitos
 6a0:	20 91 f5 03 	lds	r18, 0x03F5	; 0x8003f5 <tempo>
 6a4:	30 91 f6 03 	lds	r19, 0x03F6	; 0x8003f6 <tempo+0x1>
 6a8:	c9 01       	movw	r24, r18
 6aa:	88 0f       	add	r24, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	22 0f       	add	r18, r18
 6b0:	33 1f       	adc	r19, r19
 6b2:	22 0f       	add	r18, r18
 6b4:	33 1f       	adc	r19, r19
 6b6:	22 0f       	add	r18, r18
 6b8:	33 1f       	adc	r19, r19
 6ba:	82 0f       	add	r24, r18
 6bc:	93 1f       	adc	r25, r19
 6be:	84 0f       	add	r24, r20
 6c0:	91 1d       	adc	r25, r1
 6c2:	c0 97       	sbiw	r24, 0x30	; 48
 6c4:	90 93 f6 03 	sts	0x03F6, r25	; 0x8003f6 <tempo+0x1>
 6c8:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <tempo>
				song++;                 // Avanzo al proximo caracter
 6cc:	9d 01       	movw	r18, r26
 6ce:	2f 5f       	subi	r18, 0xFF	; 255
 6d0:	3f 4f       	sbci	r19, 0xFF	; 255
 6d2:	30 93 b1 03 	sts	0x03B1, r19	; 0x8003b1 <song+0x1>
 6d6:	20 93 b0 03 	sts	0x03B0, r18	; 0x8003b0 <song>
				if (*song>='0' && *song<='9')
 6da:	11 96       	adiw	r26, 0x01	; 1
 6dc:	4c 91       	ld	r20, X
 6de:	50 ed       	ldi	r21, 0xD0	; 208
 6e0:	54 0f       	add	r21, r20
 6e2:	5a 30       	cpi	r21, 0x0A	; 10
 6e4:	f0 f4       	brcc	.+60     	; 0x722 <play_LoadSong+0x27e>
				{
					tempo = tempo*10 + (*song - '0'); // El tempo tiene tres digitos
 6e6:	bc 01       	movw	r22, r24
 6e8:	66 0f       	add	r22, r22
 6ea:	77 1f       	adc	r23, r23
 6ec:	88 0f       	add	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	88 0f       	add	r24, r24
 6f2:	99 1f       	adc	r25, r25
 6f4:	88 0f       	add	r24, r24
 6f6:	99 1f       	adc	r25, r25
 6f8:	86 0f       	add	r24, r22
 6fa:	97 1f       	adc	r25, r23
 6fc:	84 0f       	add	r24, r20
 6fe:	91 1d       	adc	r25, r1
 700:	c0 97       	sbiw	r24, 0x30	; 48
 702:	90 93 f6 03 	sts	0x03F6, r25	; 0x8003f6 <tempo+0x1>
 706:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <tempo>
					song++;               // Avanzo al proximo caracter
 70a:	2f 5f       	subi	r18, 0xFF	; 255
 70c:	3f 4f       	sbci	r19, 0xFF	; 255
 70e:	30 93 b1 03 	sts	0x03B1, r19	; 0x8003b1 <song+0x1>
 712:	20 93 b0 03 	sts	0x03B0, r18	; 0x8003b0 <song>
 716:	05 c0       	rjmp	.+10     	; 0x722 <play_LoadSong+0x27e>
				}
			}
			while (*song == ',') song++;  // Salteo ','
 718:	31 96       	adiw	r30, 0x01	; 1
 71a:	f0 93 b1 03 	sts	0x03B1, r31	; 0x8003b1 <song+0x1>
 71e:	e0 93 b0 03 	sts	0x03B0, r30	; 0x8003b0 <song>
 722:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <song>
 726:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <song+0x1>
 72a:	80 81       	ld	r24, Z
 72c:	8c 32       	cpi	r24, 0x2C	; 44
 72e:	a1 f3       	breq	.-24     	; 0x718 <play_LoadSong+0x274>
 730:	05 c0       	rjmp	.+10     	; 0x73c <play_LoadSong+0x298>
		}
		while (*song == ',') song++;    // Salteo ','
 732:	31 96       	adiw	r30, 0x01	; 1
 734:	f0 93 b1 03 	sts	0x03B1, r31	; 0x8003b1 <song+0x1>
 738:	e0 93 b0 03 	sts	0x03B0, r30	; 0x8003b0 <song>
 73c:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <song>
 740:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <song+0x1>
 744:	80 81       	ld	r24, Z
 746:	8c 32       	cpi	r24, 0x2C	; 44
 748:	a1 f3       	breq	.-24     	; 0x732 <play_LoadSong+0x28e>
	duration = 4;                 // Duracion estandar = 4/4 = 1 beat
	tempo = 63;                   // Tempo estandar = 63 bpm
	octave = 6;                   // Octava estandar = 6th
	while (*song != ':') song++;  // Busca el primer ':'
	song++;                       // Saltea el primer ':'
	while (*song!=':')            // Repite hasta encontrar ':'
 74a:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <song>
 74e:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <song+0x1>
 752:	80 81       	ld	r24, Z
 754:	8a 33       	cpi	r24, 0x3A	; 58
 756:	09 f0       	breq	.+2      	; 0x75a <play_LoadSong+0x2b6>
 758:	d0 ce       	rjmp	.-608    	; 0x4fa <play_LoadSong+0x56>
			}
			while (*song == ',') song++;  // Salteo ','
		}
		while (*song == ',') song++;    // Salteo ','
	}
	song++;                       // Avanzo al proximo caracter
 75a:	31 96       	adiw	r30, 0x01	; 1
 75c:	f0 93 b1 03 	sts	0x03B1, r31	; 0x8003b1 <song+0x1>
 760:	e0 93 b0 03 	sts	0x03B0, r30	; 0x8003b0 <song>
 764:	08 95       	ret

00000766 <play_note>:
}

//Toco la nota que corresponde (No bloqueante)
uint8_t play_note(void) // <------------------------------
{
 766:	0f 93       	push	r16
 768:	cf 93       	push	r28
 76a:	df 93       	push	r29
	// read the musical notes
	//while (*song)                 // Repito hasta que el caracter sea null (No repito ya que de esta manera es bloqueante)
	if((*song !=  '\0')){  // <------------------------------
 76c:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <song>
 770:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <song+0x1>
 774:	80 81       	ld	r24, Z
 776:	88 23       	and	r24, r24
 778:	09 f4       	brne	.+2      	; 0x77c <play_note+0x16>
 77a:	02 c1       	rjmp	.+516    	; 0x980 <__stack+0x81>
		current_note = 255;         // Nota por defecto = pausa
 77c:	9f ef       	ldi	r25, 0xFF	; 255
 77e:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <current_note>
		temp_octave = octave;       // Seteo la octava a la por defecto de la cancion
 782:	90 91 fa 03 	lds	r25, 0x03FA	; 0x8003fa <octave>
 786:	90 93 b6 03 	sts	0x03B6, r25	; 0x8003b6 <temp_octave>
		temp_duration = duration;   // Seteo la duracion a la por defecto de la cancion
 78a:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <duration>
 78e:	90 93 b7 03 	sts	0x03B7, r25	; 0x8003b7 <temp_duration>
		dot_flag = 0;               // Borro el flag de deteccion de punto
 792:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <dot_flag>
		// Busco un prefijo de duracion
		if (*song>='0' && *song<='9')
 796:	80 53       	subi	r24, 0x30	; 48
 798:	8a 30       	cpi	r24, 0x0A	; 10
 79a:	e8 f4       	brcc	.+58     	; 0x7d6 <play_note+0x70>
		{
			temp_duration = *song - '0';
 79c:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <temp_duration>
			song++;
 7a0:	9f 01       	movw	r18, r30
 7a2:	2f 5f       	subi	r18, 0xFF	; 255
 7a4:	3f 4f       	sbci	r19, 0xFF	; 255
 7a6:	30 93 b1 03 	sts	0x03B1, r19	; 0x8003b1 <song+0x1>
 7aa:	20 93 b0 03 	sts	0x03B0, r18	; 0x8003b0 <song>
			if (*song>='0' && *song<='9')
 7ae:	91 81       	ldd	r25, Z+1	; 0x01
 7b0:	40 ed       	ldi	r20, 0xD0	; 208
 7b2:	49 0f       	add	r20, r25
 7b4:	4a 30       	cpi	r20, 0x0A	; 10
 7b6:	78 f4       	brcc	.+30     	; 0x7d6 <play_note+0x70>
			{
				temp_duration = temp_duration*10 + (*song - '0');
 7b8:	88 0f       	add	r24, r24
 7ba:	48 2f       	mov	r20, r24
 7bc:	44 0f       	add	r20, r20
 7be:	44 0f       	add	r20, r20
 7c0:	84 0f       	add	r24, r20
 7c2:	98 0f       	add	r25, r24
 7c4:	90 53       	subi	r25, 0x30	; 48
 7c6:	90 93 b7 03 	sts	0x03B7, r25	; 0x8003b7 <temp_duration>
				song++;
 7ca:	2f 5f       	subi	r18, 0xFF	; 255
 7cc:	3f 4f       	sbci	r19, 0xFF	; 255
 7ce:	30 93 b1 03 	sts	0x03B1, r19	; 0x8003b1 <song+0x1>
 7d2:	20 93 b0 03 	sts	0x03B0, r18	; 0x8003b0 <song>
			}
		}
		// Busco una nota
		switch (*song)
 7d6:	c0 91 b0 03 	lds	r28, 0x03B0	; 0x8003b0 <song>
 7da:	d0 91 b1 03 	lds	r29, 0x03B1	; 0x8003b1 <song+0x1>
 7de:	e8 81       	ld	r30, Y
 7e0:	8e 2f       	mov	r24, r30
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	fc 01       	movw	r30, r24
 7e6:	e1 56       	subi	r30, 0x61	; 97
 7e8:	f1 09       	sbc	r31, r1
 7ea:	e7 30       	cpi	r30, 0x07	; 7
 7ec:	f1 05       	cpc	r31, r1
 7ee:	f0 f4       	brcc	.+60     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 7f0:	ec 5c       	subi	r30, 0xCC	; 204
 7f2:	ff 4f       	sbci	r31, 0xFF	; 255
 7f4:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__tablejump2__>
		{
			case 'c': current_note = 0; break;    // C (do)
 7f8:	10 92 b5 03 	sts	0x03B5, r1	; 0x8003b5 <current_note>
 7fc:	17 c0       	rjmp	.+46     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
			case 'd': current_note = 2; break;    // D (re)
 7fe:	82 e0       	ldi	r24, 0x02	; 2
 800:	80 93 b5 03 	sts	0x03B5, r24	; 0x8003b5 <current_note>
 804:	13 c0       	rjmp	.+38     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
			case 'e': current_note = 4; break;    // E (mi)
 806:	84 e0       	ldi	r24, 0x04	; 4
 808:	80 93 b5 03 	sts	0x03B5, r24	; 0x8003b5 <current_note>
 80c:	0f c0       	rjmp	.+30     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
			case 'f': current_note = 5; break;    // F (fa)
 80e:	85 e0       	ldi	r24, 0x05	; 5
 810:	80 93 b5 03 	sts	0x03B5, r24	; 0x8003b5 <current_note>
 814:	0b c0       	rjmp	.+22     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
			case 'g': current_note = 7; break;    // G (sol)
 816:	87 e0       	ldi	r24, 0x07	; 7
 818:	80 93 b5 03 	sts	0x03B5, r24	; 0x8003b5 <current_note>
 81c:	07 c0       	rjmp	.+14     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
			case 'a': current_note = 9; break;    // A (la)
 81e:	89 e0       	ldi	r24, 0x09	; 9
 820:	80 93 b5 03 	sts	0x03B5, r24	; 0x8003b5 <current_note>
 824:	03 c0       	rjmp	.+6      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
			case 'b': current_note = 11; break;   // B (si)
 826:	8b e0       	ldi	r24, 0x0B	; 11
 828:	80 93 b5 03 	sts	0x03B5, r24	; 0x8003b5 <current_note>
			case 'p': current_note = 255; break;  // pausa
		}
		song++;                     // Avanzo al prï¿½ximo caracter
 82c:	ce 01       	movw	r24, r28
 82e:	01 96       	adiw	r24, 0x01	; 1
 830:	90 93 b1 03 	sts	0x03B1, r25	; 0x8003b1 <song+0x1>
 834:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <song>
		// Busco un '#' siguiendo la nota
		if (*song=='#')
 838:	29 81       	ldd	r18, Y+1	; 0x01
 83a:	23 32       	cpi	r18, 0x23	; 35
 83c:	51 f4       	brne	.+20     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
		{
			current_note++;   // Incremento la nota (A->A#, C->C#, D->D#, F->F#, G->G#)
 83e:	20 91 b5 03 	lds	r18, 0x03B5	; 0x8003b5 <current_note>
 842:	2f 5f       	subi	r18, 0xFF	; 255
 844:	20 93 b5 03 	sts	0x03B5, r18	; 0x8003b5 <current_note>
			song++;                   // Avanzo al prï¿½ximo caracter
 848:	01 96       	adiw	r24, 0x01	; 1
 84a:	90 93 b1 03 	sts	0x03B1, r25	; 0x8003b1 <song+0x1>
 84e:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <song>
		}

		// Busco '.' (extiende la duracion de la nota un 50%)
		if (*song=='.')
 852:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <song>
 856:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <song+0x1>
 85a:	80 81       	ld	r24, Z
 85c:	8e 32       	cpi	r24, 0x2E	; 46
 85e:	41 f4       	brne	.+16     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
		{
			dot_flag = 1;             // Si se encuentra '.', seteo el flag
 860:	81 e0       	ldi	r24, 0x01	; 1
 862:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <dot_flag>
			song++;                   // Avanzo al proximo caracter
 866:	31 96       	adiw	r30, 0x01	; 1
 868:	f0 93 b1 03 	sts	0x03B1, r31	; 0x8003b1 <song+0x1>
 86c:	e0 93 b0 03 	sts	0x03B0, r30	; 0x8003b0 <song>
		}
		// Busco un sufijo de una octava
		if (*song>='0' && *song<='9')
 870:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <song>
 874:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <song+0x1>
 878:	80 81       	ld	r24, Z
 87a:	80 53       	subi	r24, 0x30	; 48
 87c:	8a 30       	cpi	r24, 0x0A	; 10
 87e:	38 f4       	brcc	.+14     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
		{
			temp_octave = *song - '0';// Seteo la octava en consecuencia
 880:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <temp_octave>
			song++;                   // Avanzo al proximo caracter
 884:	31 96       	adiw	r30, 0x01	; 1
 886:	f0 93 b1 03 	sts	0x03B1, r31	; 0x8003b1 <song+0x1>
 88a:	e0 93 b0 03 	sts	0x03B0, r30	; 0x8003b0 <song>
		}
		if (*song=='.') // Un punto puede ser encontrado incluso despues de una octava
 88e:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <song>
 892:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <song+0x1>
 896:	80 81       	ld	r24, Z
 898:	8e 32       	cpi	r24, 0x2E	; 46
 89a:	71 f4       	brne	.+28     	; 0x8b8 <__DATA_REGION_LENGTH__+0xb8>
		{
			dot_flag = 1;             // Si se encuentra '.', seteo el flag
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <dot_flag>
			song++;                   // Avanzo al proximo caracter
 8a2:	31 96       	adiw	r30, 0x01	; 1
 8a4:	f0 93 b1 03 	sts	0x03B1, r31	; 0x8003b1 <song+0x1>
 8a8:	e0 93 b0 03 	sts	0x03B0, r30	; 0x8003b0 <song>
 8ac:	05 c0       	rjmp	.+10     	; 0x8b8 <__DATA_REGION_LENGTH__+0xb8>
		}
		while (*song == ',') song++;    // Salteo ','
 8ae:	31 96       	adiw	r30, 0x01	; 1
 8b0:	f0 93 b1 03 	sts	0x03B1, r31	; 0x8003b1 <song+0x1>
 8b4:	e0 93 b0 03 	sts	0x03B0, r30	; 0x8003b0 <song>
 8b8:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <song>
 8bc:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <song+0x1>
 8c0:	80 81       	ld	r24, Z
 8c2:	8c 32       	cpi	r24, 0x2C	; 44
 8c4:	a1 f3       	breq	.-24     	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
		// Calculo la duracion de la nota
		calc_duration = (60000/tempo)/(temp_duration);
 8c6:	20 91 f5 03 	lds	r18, 0x03F5	; 0x8003f5 <tempo>
 8ca:	30 91 f6 03 	lds	r19, 0x03F6	; 0x8003f6 <tempo+0x1>
 8ce:	40 e0       	ldi	r20, 0x00	; 0
 8d0:	50 e0       	ldi	r21, 0x00	; 0
 8d2:	60 e6       	ldi	r22, 0x60	; 96
 8d4:	7a ee       	ldi	r23, 0xEA	; 234
 8d6:	80 e0       	ldi	r24, 0x00	; 0
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__divmodsi4>
 8de:	ca 01       	movw	r24, r20
 8e0:	b9 01       	movw	r22, r18
 8e2:	00 91 b7 03 	lds	r16, 0x03B7	; 0x8003b7 <temp_duration>
 8e6:	20 2f       	mov	r18, r16
 8e8:	30 e0       	ldi	r19, 0x00	; 0
 8ea:	40 e0       	ldi	r20, 0x00	; 0
 8ec:	50 e0       	ldi	r21, 0x00	; 0
 8ee:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__divmodsi4>
		calc_duration *= 4;         // La nota completa tiene cuatro beats
 8f2:	22 0f       	add	r18, r18
 8f4:	33 1f       	adc	r19, r19
 8f6:	22 0f       	add	r18, r18
 8f8:	33 1f       	adc	r19, r19
 8fa:	30 93 b3 03 	sts	0x03B3, r19	; 0x8003b3 <calc_duration+0x1>
 8fe:	20 93 b2 03 	sts	0x03B2, r18	; 0x8003b2 <calc_duration>
		// Chequeo si el flag de punto esta activado, de ser asi, extiendo la duracion en un 50%
		if (dot_flag) calc_duration = (calc_duration*3)/2;
 902:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <dot_flag>
 906:	88 23       	and	r24, r24
 908:	59 f0       	breq	.+22     	; 0x920 <__stack+0x21>
 90a:	c9 01       	movw	r24, r18
 90c:	88 0f       	add	r24, r24
 90e:	99 1f       	adc	r25, r25
 910:	28 0f       	add	r18, r24
 912:	39 1f       	adc	r19, r25
 914:	36 95       	lsr	r19
 916:	27 95       	ror	r18
 918:	30 93 b3 03 	sts	0x03B3, r19	; 0x8003b3 <calc_duration+0x1>
 91c:	20 93 b2 03 	sts	0x03B2, r18	; 0x8003b2 <calc_duration>
		// Si la nota actual NO es una pausa, reproduzco la nota usando la funcion sound
		if (current_note<255) sound(note[temp_octave-4][current_note],calc_duration);
 920:	20 91 b5 03 	lds	r18, 0x03B5	; 0x8003b5 <current_note>
 924:	2f 3f       	cpi	r18, 0xFF	; 255
 926:	e9 f0       	breq	.+58     	; 0x962 <__stack+0x63>
 928:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <temp_octave>
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	04 97       	sbiw	r24, 0x04	; 4
 930:	60 91 b2 03 	lds	r22, 0x03B2	; 0x8003b2 <calc_duration>
 934:	70 91 b3 03 	lds	r23, 0x03B3	; 0x8003b3 <calc_duration+0x1>
 938:	fc 01       	movw	r30, r24
 93a:	ee 0f       	add	r30, r30
 93c:	ff 1f       	adc	r31, r31
 93e:	e8 0f       	add	r30, r24
 940:	f9 1f       	adc	r31, r25
 942:	ee 0f       	add	r30, r30
 944:	ff 1f       	adc	r31, r31
 946:	ee 0f       	add	r30, r30
 948:	ff 1f       	adc	r31, r31
 94a:	e2 0f       	add	r30, r18
 94c:	f1 1d       	adc	r31, r1
 94e:	ee 0f       	add	r30, r30
 950:	ff 1f       	adc	r31, r31
 952:	e1 58       	subi	r30, 0x81	; 129
 954:	fd 4f       	sbci	r31, 0xFD	; 253
 956:	80 81       	ld	r24, Z
 958:	91 81       	ldd	r25, Z+1	; 0x01
 95a:	0e 94 2d 02 	call	0x45a	; 0x45a <sound>
		else
		{ // Si la nota actual es una pausa (255), espero dicha cantidad de tiempo
			duration_timer = calc_duration;
			sound_playing = 1;
		}
		return 1;     // <------------------------------
 95e:	81 e0       	ldi	r24, 0x01	; 1
 960:	10 c0       	rjmp	.+32     	; 0x982 <__stack+0x83>
		if (dot_flag) calc_duration = (calc_duration*3)/2;
		// Si la nota actual NO es una pausa, reproduzco la nota usando la funcion sound
		if (current_note<255) sound(note[temp_octave-4][current_note],calc_duration);
		else
		{ // Si la nota actual es una pausa (255), espero dicha cantidad de tiempo
			duration_timer = calc_duration;
 962:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <calc_duration>
 966:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <calc_duration+0x1>
 96a:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <duration_timer+0x1>
 96e:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <duration_timer>
			sound_playing = 1;
 972:	81 e0       	ldi	r24, 0x01	; 1
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	90 93 b9 03 	sts	0x03B9, r25	; 0x8003b9 <sound_playing+0x1>
 97a:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <sound_playing>
 97e:	01 c0       	rjmp	.+2      	; 0x982 <__stack+0x83>
		}
		return 1;     // <------------------------------
	} else {
		return 0; // <------------------------------
 980:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 982:	df 91       	pop	r29
 984:	cf 91       	pop	r28
 986:	0f 91       	pop	r16
 988:	08 95       	ret

0000098a <SerialPort_Init>:
	UCSR0B |= (1<<UDRIE0);
}

void SerialPort_TX_Interrupt_Disable(void)
{
	UCSR0B &=~(1<<UDRIE0);
 98a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 98e:	96 e0       	ldi	r25, 0x06	; 6
 990:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 994:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 998:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 99c:	08 95       	ret

0000099e <SerialPort_TX_Enable>:
 99e:	e1 ec       	ldi	r30, 0xC1	; 193
 9a0:	f0 e0       	ldi	r31, 0x00	; 0
 9a2:	80 81       	ld	r24, Z
 9a4:	88 60       	ori	r24, 0x08	; 8
 9a6:	80 83       	st	Z, r24
 9a8:	08 95       	ret

000009aa <SerialPort_TX_Interrupt_Enable>:
 9aa:	e1 ec       	ldi	r30, 0xC1	; 193
 9ac:	f0 e0       	ldi	r31, 0x00	; 0
 9ae:	80 81       	ld	r24, Z
 9b0:	80 62       	ori	r24, 0x20	; 32
 9b2:	80 83       	st	Z, r24
 9b4:	08 95       	ret

000009b6 <SerialPort_RX_Enable>:


// Inicialización de Receptor

void SerialPort_RX_Enable(void){
	UCSR0B |= (1<<RXEN0);
 9b6:	e1 ec       	ldi	r30, 0xC1	; 193
 9b8:	f0 e0       	ldi	r31, 0x00	; 0
 9ba:	80 81       	ld	r24, Z
 9bc:	80 61       	ori	r24, 0x10	; 16
 9be:	80 83       	st	Z, r24
 9c0:	08 95       	ret

000009c2 <SerialPort_RX_Interrupt_Enable>:
}

void SerialPort_RX_Interrupt_Enable(void){
	UCSR0B |= (1<<RXCIE0);
 9c2:	e1 ec       	ldi	r30, 0xC1	; 193
 9c4:	f0 e0       	ldi	r31, 0x00	; 0
 9c6:	80 81       	ld	r24, Z
 9c8:	80 68       	ori	r24, 0x80	; 128
 9ca:	80 83       	st	Z, r24
 9cc:	08 95       	ret

000009ce <TIMER0_Init>:
 #include <util/delay.h>
 #include <avr/interrupt.h>

void TIMER0_Init(){
		// Configuro una interrupcion cada 1 mseg
		OCR0A = 248;			//124 para 8MHz y 248 para 16MHz
 9ce:	88 ef       	ldi	r24, 0xF8	; 248
 9d0:	87 bd       	out	0x27, r24	; 39
		TCCR0A = (1<<WGM01);   // Modo CTC, clock interno, prescalador 64
 9d2:	82 e0       	ldi	r24, 0x02	; 2
 9d4:	84 bd       	out	0x24, r24	; 36
		TCCR0B = (1<<CS01)|(1<<CS00);   // Modo CTC, clock interno, prescalador 64
 9d6:	93 e0       	ldi	r25, 0x03	; 3
 9d8:	95 bd       	out	0x25, r25	; 37
		TIMSK0 = (1<<OCIE0A);   // Habilito Timer 0 en modo de interrupcion de comparacion
 9da:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 9de:	08 95       	ret

000009e0 <TIMER1_Init>:
}

void TIMER1_Init(){
		TCCR1A|=(1<<COM1A0);// Configuro Timer1 para clk con prescaler P=1, modo CTC y salida por pin
 9e0:	e0 e8       	ldi	r30, 0x80	; 128
 9e2:	f0 e0       	ldi	r31, 0x00	; 0
 9e4:	80 81       	ld	r24, Z
 9e6:	80 64       	ori	r24, 0x40	; 64
 9e8:	80 83       	st	Z, r24
		TCCR1B|=(1<<WGM12)|(1<<CS10);
 9ea:	e1 e8       	ldi	r30, 0x81	; 129
 9ec:	f0 e0       	ldi	r31, 0x00	; 0
 9ee:	80 81       	ld	r24, Z
 9f0:	89 60       	ori	r24, 0x09	; 9
 9f2:	80 83       	st	Z, r24
		DDRB|=(1<<PINB1); // El PIN1 del PORTB sera el pin de salida
 9f4:	84 b1       	in	r24, 0x04	; 4
 9f6:	82 60       	ori	r24, 0x02	; 2
 9f8:	84 b9       	out	0x04, r24	; 4
 9fa:	08 95       	ret

000009fc <UART_Get_Flag>:
}

void UART_Send_Digit_To_Transmit(uint8_t number){
	lengthCadena = 1;
	TX_String_Buffer[0] = '0' + number;
	SerialPort_TX_Interrupt_Enable();
 9fc:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <flagMEF>
 a00:	08 95       	ret

00000a02 <UART_Set_flag>:
 a02:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <flagMEF>
 a06:	08 95       	ret

00000a08 <UART_Get_String_From_Buffer>:
 a08:	8b ef       	ldi	r24, 0xFB	; 251
 a0a:	93 e0       	ldi	r25, 0x03	; 3
 a0c:	08 95       	ret

00000a0e <UART_Send_String_To_Transmit>:
}

//Manda mensaje a imprimir a la linea de comando
 
void UART_Send_String_To_Transmit(char* string_pointer){
 a0e:	bc 01       	movw	r22, r24
	while((flagTX));
 a10:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <flagTX>
 a14:	91 11       	cpse	r25, r1
 a16:	fc cf       	rjmp	.-8      	; 0xa10 <UART_Send_String_To_Transmit+0x2>
	flagTX = 1;
 a18:	81 e0       	ldi	r24, 0x01	; 1
 a1a:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <flagTX>
	lengthCadena = strlen(string_pointer);
 a1e:	fb 01       	movw	r30, r22
 a20:	01 90       	ld	r0, Z+
 a22:	00 20       	and	r0, r0
 a24:	e9 f7       	brne	.-6      	; 0xa20 <UART_Send_String_To_Transmit+0x12>
 a26:	31 97       	sbiw	r30, 0x01	; 1
 a28:	e6 1b       	sub	r30, r22
 a2a:	f7 0b       	sbc	r31, r23
 a2c:	e0 93 ba 03 	sts	0x03BA, r30	; 0x8003ba <lengthCadena>
	strcpy(TX_String_Buffer, string_pointer);
 a30:	8d e2       	ldi	r24, 0x2D	; 45
 a32:	94 e0       	ldi	r25, 0x04	; 4
 a34:	0e 94 25 06 	call	0xc4a	; 0xc4a <strcpy>
	SerialPort_TX_Interrupt_Enable();
 a38:	0e 94 d5 04 	call	0x9aa	; 0x9aa <SerialPort_TX_Interrupt_Enable>
 a3c:	08 95       	ret

00000a3e <UART_Build_CorrectSyntax_String>:
}

void UART_Build_CorrectSyntax_String(char* string_pointer){ // Le agrego el '\r' y'\n' para que se vea correctamente en la linea de comando
	lengthCadena = strlen(string_pointer); //Longitud de la cadena
 a3e:	fc 01       	movw	r30, r24
 a40:	01 90       	ld	r0, Z+
 a42:	00 20       	and	r0, r0
 a44:	e9 f7       	brne	.-6      	; 0xa40 <UART_Build_CorrectSyntax_String+0x2>
 a46:	31 97       	sbiw	r30, 0x01	; 1
 a48:	e8 1b       	sub	r30, r24
 a4a:	f9 0b       	sbc	r31, r25
	string_pointer[lengthCadena] = '\r' ;
 a4c:	dc 01       	movw	r26, r24
 a4e:	ae 0f       	add	r26, r30
 a50:	b1 1d       	adc	r27, r1
 a52:	2d e0       	ldi	r18, 0x0D	; 13
 a54:	2c 93       	st	X, r18
	string_pointer[++lengthCadena] = '\n';
 a56:	ef 5f       	subi	r30, 0xFF	; 255
 a58:	e0 93 ba 03 	sts	0x03BA, r30	; 0x8003ba <lengthCadena>
 a5c:	9c 01       	movw	r18, r24
 a5e:	2e 0f       	add	r18, r30
 a60:	31 1d       	adc	r19, r1
 a62:	f9 01       	movw	r30, r18
 a64:	2a e0       	ldi	r18, 0x0A	; 10
 a66:	20 83       	st	Z, r18
 a68:	08 95       	ret

00000a6a <UART_Update>:
}

void UART_Update(){
	
	if(flagD){ // recepción NO Bloqueante
 a6a:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <flagD>
 a6e:	88 23       	and	r24, r24
 a70:	c1 f0       	breq	.+48     	; 0xaa2 <UART_Update+0x38>
		strcpy(TX_String_Buffer, RX_String_Buffer);
 a72:	6b ef       	ldi	r22, 0xFB	; 251
 a74:	73 e0       	ldi	r23, 0x03	; 3
 a76:	8d e2       	ldi	r24, 0x2D	; 45
 a78:	94 e0       	ldi	r25, 0x04	; 4
 a7a:	0e 94 25 06 	call	0xc4a	; 0xc4a <strcpy>
		UART_Build_CorrectSyntax_String(TX_String_Buffer);
 a7e:	8d e2       	ldi	r24, 0x2D	; 45
 a80:	94 e0       	ldi	r25, 0x04	; 4
 a82:	0e 94 1f 05 	call	0xa3e	; 0xa3e <UART_Build_CorrectSyntax_String>
		flagTX = 1;
 a86:	81 e0       	ldi	r24, 0x01	; 1
 a88:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <flagTX>
		SerialPort_TX_Interrupt_Enable();
 a8c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <SerialPort_TX_Interrupt_Enable>
		while (flagTX);
 a90:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <flagTX>
 a94:	81 11       	cpse	r24, r1
 a96:	fc cf       	rjmp	.-8      	; 0xa90 <UART_Update+0x26>
		flagMEF = 1 ;
 a98:	81 e0       	ldi	r24, 0x01	; 1
 a9a:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <flagMEF>
		flagD=0;
 a9e:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <flagD>
 aa2:	08 95       	ret

00000aa4 <__vector_18>:
	}
}

 //Recepcion
ISR(USART_RX_vect){
 aa4:	1f 92       	push	r1
 aa6:	0f 92       	push	r0
 aa8:	0f b6       	in	r0, 0x3f	; 63
 aaa:	0f 92       	push	r0
 aac:	11 24       	eor	r1, r1
 aae:	8f 93       	push	r24
 ab0:	ef 93       	push	r30
 ab2:	ff 93       	push	r31
	RX_Buffer = UDR0; //la lectura del UDR borra flag RXC
 ab4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 ab8:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <RX_Buffer>
	RX_String_Buffer[writeIndex] = RX_Buffer;
 abc:	e0 91 bd 03 	lds	r30, 0x03BD	; 0x8003bd <writeIndex>
 ac0:	f0 e0       	ldi	r31, 0x00	; 0
 ac2:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <RX_Buffer>
 ac6:	e5 50       	subi	r30, 0x05	; 5
 ac8:	fc 4f       	sbci	r31, 0xFC	; 252
 aca:	80 83       	st	Z, r24
	if(RX_Buffer == '\r' || (writeIndex >= BUFFER_LENGTH - 2)){ //Reservo 2 lugares del buffer para el '\r' y'\n'
 acc:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <RX_Buffer>
 ad0:	8d 30       	cpi	r24, 0x0D	; 13
 ad2:	21 f0       	breq	.+8      	; 0xadc <__vector_18+0x38>
 ad4:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <writeIndex>
 ad8:	80 33       	cpi	r24, 0x30	; 48
 ada:	60 f0       	brcs	.+24     	; 0xaf4 <__vector_18+0x50>
		flagD = 1;
 adc:	81 e0       	ldi	r24, 0x01	; 1
 ade:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <flagD>
		RX_String_Buffer[writeIndex] = '\0';
 ae2:	e0 91 bd 03 	lds	r30, 0x03BD	; 0x8003bd <writeIndex>
 ae6:	f0 e0       	ldi	r31, 0x00	; 0
 ae8:	e5 50       	subi	r30, 0x05	; 5
 aea:	fc 4f       	sbci	r31, 0xFC	; 252
 aec:	10 82       	st	Z, r1
		writeIndex = 0;
 aee:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <writeIndex>
 af2:	05 c0       	rjmp	.+10     	; 0xafe <__vector_18+0x5a>
		} else {
		writeIndex++;
 af4:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <writeIndex>
 af8:	8f 5f       	subi	r24, 0xFF	; 255
 afa:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <writeIndex>
	}
}
 afe:	ff 91       	pop	r31
 b00:	ef 91       	pop	r30
 b02:	8f 91       	pop	r24
 b04:	0f 90       	pop	r0
 b06:	0f be       	out	0x3f, r0	; 63
 b08:	0f 90       	pop	r0
 b0a:	1f 90       	pop	r1
 b0c:	18 95       	reti

00000b0e <__vector_19>:

 //Transmision
ISR(USART_UDRE_vect){
 b0e:	1f 92       	push	r1
 b10:	0f 92       	push	r0
 b12:	0f b6       	in	r0, 0x3f	; 63
 b14:	0f 92       	push	r0
 b16:	11 24       	eor	r1, r1
 b18:	8f 93       	push	r24
 b1a:	ef 93       	push	r30
 b1c:	ff 93       	push	r31
	UDR0 = TX_String_Buffer[readIndex];
 b1e:	e0 91 bc 03 	lds	r30, 0x03BC	; 0x8003bc <readIndex>
 b22:	f0 e0       	ldi	r31, 0x00	; 0
 b24:	e3 5d       	subi	r30, 0xD3	; 211
 b26:	fb 4f       	sbci	r31, 0xFB	; 251
 b28:	80 81       	ld	r24, Z
 b2a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	readIndex++;
 b2e:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <readIndex>
 b32:	8f 5f       	subi	r24, 0xFF	; 255
 b34:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <readIndex>
	if(lengthCadena == 0){
 b38:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <lengthCadena>
 b3c:	81 11       	cpse	r24, r1
 b3e:	0c c0       	rjmp	.+24     	; 0xb58 <__vector_19+0x4a>
		readIndex = 0;
 b40:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <readIndex>
		lengthCadena = 0;
 b44:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <lengthCadena>
		flagTX = 0;
 b48:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <flagTX>
		UCSR0B &=~(1<<UDRIE0); //Deshabilito interrupcion
 b4c:	e1 ec       	ldi	r30, 0xC1	; 193
 b4e:	f0 e0       	ldi	r31, 0x00	; 0
 b50:	80 81       	ld	r24, Z
 b52:	8f 7d       	andi	r24, 0xDF	; 223
 b54:	80 83       	st	Z, r24
 b56:	03 c0       	rjmp	.+6      	; 0xb5e <__vector_19+0x50>
		} else{
		lengthCadena--;
 b58:	81 50       	subi	r24, 0x01	; 1
 b5a:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <lengthCadena>
	}
	
	
}
 b5e:	ff 91       	pop	r31
 b60:	ef 91       	pop	r30
 b62:	8f 91       	pop	r24
 b64:	0f 90       	pop	r0
 b66:	0f be       	out	0x3f, r0	; 63
 b68:	0f 90       	pop	r0
 b6a:	1f 90       	pop	r1
 b6c:	18 95       	reti

00000b6e <__divmodsi4>:
 b6e:	05 2e       	mov	r0, r21
 b70:	97 fb       	bst	r25, 7
 b72:	1e f4       	brtc	.+6      	; 0xb7a <__divmodsi4+0xc>
 b74:	00 94       	com	r0
 b76:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__negsi2>
 b7a:	57 fd       	sbrc	r21, 7
 b7c:	07 d0       	rcall	.+14     	; 0xb8c <__divmodsi4_neg2>
 b7e:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__udivmodsi4>
 b82:	07 fc       	sbrc	r0, 7
 b84:	03 d0       	rcall	.+6      	; 0xb8c <__divmodsi4_neg2>
 b86:	4e f4       	brtc	.+18     	; 0xb9a <__divmodsi4_exit>
 b88:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__negsi2>

00000b8c <__divmodsi4_neg2>:
 b8c:	50 95       	com	r21
 b8e:	40 95       	com	r20
 b90:	30 95       	com	r19
 b92:	21 95       	neg	r18
 b94:	3f 4f       	sbci	r19, 0xFF	; 255
 b96:	4f 4f       	sbci	r20, 0xFF	; 255
 b98:	5f 4f       	sbci	r21, 0xFF	; 255

00000b9a <__divmodsi4_exit>:
 b9a:	08 95       	ret

00000b9c <__negsi2>:
 b9c:	90 95       	com	r25
 b9e:	80 95       	com	r24
 ba0:	70 95       	com	r23
 ba2:	61 95       	neg	r22
 ba4:	7f 4f       	sbci	r23, 0xFF	; 255
 ba6:	8f 4f       	sbci	r24, 0xFF	; 255
 ba8:	9f 4f       	sbci	r25, 0xFF	; 255
 baa:	08 95       	ret

00000bac <__tablejump2__>:
 bac:	ee 0f       	add	r30, r30
 bae:	ff 1f       	adc	r31, r31
 bb0:	05 90       	lpm	r0, Z+
 bb2:	f4 91       	lpm	r31, Z
 bb4:	e0 2d       	mov	r30, r0
 bb6:	09 94       	ijmp

00000bb8 <__udivmodsi4>:
 bb8:	a1 e2       	ldi	r26, 0x21	; 33
 bba:	1a 2e       	mov	r1, r26
 bbc:	aa 1b       	sub	r26, r26
 bbe:	bb 1b       	sub	r27, r27
 bc0:	fd 01       	movw	r30, r26
 bc2:	0d c0       	rjmp	.+26     	; 0xbde <__udivmodsi4_ep>

00000bc4 <__udivmodsi4_loop>:
 bc4:	aa 1f       	adc	r26, r26
 bc6:	bb 1f       	adc	r27, r27
 bc8:	ee 1f       	adc	r30, r30
 bca:	ff 1f       	adc	r31, r31
 bcc:	a2 17       	cp	r26, r18
 bce:	b3 07       	cpc	r27, r19
 bd0:	e4 07       	cpc	r30, r20
 bd2:	f5 07       	cpc	r31, r21
 bd4:	20 f0       	brcs	.+8      	; 0xbde <__udivmodsi4_ep>
 bd6:	a2 1b       	sub	r26, r18
 bd8:	b3 0b       	sbc	r27, r19
 bda:	e4 0b       	sbc	r30, r20
 bdc:	f5 0b       	sbc	r31, r21

00000bde <__udivmodsi4_ep>:
 bde:	66 1f       	adc	r22, r22
 be0:	77 1f       	adc	r23, r23
 be2:	88 1f       	adc	r24, r24
 be4:	99 1f       	adc	r25, r25
 be6:	1a 94       	dec	r1
 be8:	69 f7       	brne	.-38     	; 0xbc4 <__udivmodsi4_loop>
 bea:	60 95       	com	r22
 bec:	70 95       	com	r23
 bee:	80 95       	com	r24
 bf0:	90 95       	com	r25
 bf2:	9b 01       	movw	r18, r22
 bf4:	ac 01       	movw	r20, r24
 bf6:	bd 01       	movw	r22, r26
 bf8:	cf 01       	movw	r24, r30
 bfa:	08 95       	ret

00000bfc <atoi>:
 bfc:	fc 01       	movw	r30, r24
 bfe:	88 27       	eor	r24, r24
 c00:	99 27       	eor	r25, r25
 c02:	e8 94       	clt
 c04:	21 91       	ld	r18, Z+
 c06:	20 32       	cpi	r18, 0x20	; 32
 c08:	e9 f3       	breq	.-6      	; 0xc04 <atoi+0x8>
 c0a:	29 30       	cpi	r18, 0x09	; 9
 c0c:	10 f0       	brcs	.+4      	; 0xc12 <atoi+0x16>
 c0e:	2e 30       	cpi	r18, 0x0E	; 14
 c10:	c8 f3       	brcs	.-14     	; 0xc04 <atoi+0x8>
 c12:	2b 32       	cpi	r18, 0x2B	; 43
 c14:	41 f0       	breq	.+16     	; 0xc26 <atoi+0x2a>
 c16:	2d 32       	cpi	r18, 0x2D	; 45
 c18:	39 f4       	brne	.+14     	; 0xc28 <atoi+0x2c>
 c1a:	68 94       	set
 c1c:	04 c0       	rjmp	.+8      	; 0xc26 <atoi+0x2a>
 c1e:	0e 94 2c 06 	call	0xc58	; 0xc58 <__mulhi_const_10>
 c22:	82 0f       	add	r24, r18
 c24:	91 1d       	adc	r25, r1
 c26:	21 91       	ld	r18, Z+
 c28:	20 53       	subi	r18, 0x30	; 48
 c2a:	2a 30       	cpi	r18, 0x0A	; 10
 c2c:	c0 f3       	brcs	.-16     	; 0xc1e <atoi+0x22>
 c2e:	1e f4       	brtc	.+6      	; 0xc36 <atoi+0x3a>
 c30:	90 95       	com	r25
 c32:	81 95       	neg	r24
 c34:	9f 4f       	sbci	r25, 0xFF	; 255
 c36:	08 95       	ret

00000c38 <strcmp>:
 c38:	fb 01       	movw	r30, r22
 c3a:	dc 01       	movw	r26, r24
 c3c:	8d 91       	ld	r24, X+
 c3e:	01 90       	ld	r0, Z+
 c40:	80 19       	sub	r24, r0
 c42:	01 10       	cpse	r0, r1
 c44:	d9 f3       	breq	.-10     	; 0xc3c <strcmp+0x4>
 c46:	99 0b       	sbc	r25, r25
 c48:	08 95       	ret

00000c4a <strcpy>:
 c4a:	fb 01       	movw	r30, r22
 c4c:	dc 01       	movw	r26, r24
 c4e:	01 90       	ld	r0, Z+
 c50:	0d 92       	st	X+, r0
 c52:	00 20       	and	r0, r0
 c54:	e1 f7       	brne	.-8      	; 0xc4e <strcpy+0x4>
 c56:	08 95       	ret

00000c58 <__mulhi_const_10>:
 c58:	7a e0       	ldi	r23, 0x0A	; 10
 c5a:	97 9f       	mul	r25, r23
 c5c:	90 2d       	mov	r25, r0
 c5e:	87 9f       	mul	r24, r23
 c60:	80 2d       	mov	r24, r0
 c62:	91 0d       	add	r25, r1
 c64:	11 24       	eor	r1, r1
 c66:	08 95       	ret

00000c68 <_exit>:
 c68:	f8 94       	cli

00000c6a <__stop_program>:
 c6a:	ff cf       	rjmp	.-2      	; 0xc6a <__stop_program>
