
EJ3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000021a  0000028e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000096e  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000747  00000000  00000000  00000ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000035d  00000000  00000000  000013ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  0000174c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ea  00000000  00000000  000017b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000386  00000000  00000000  00001b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001f24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e1       	ldi	r30, 0x1A	; 26
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 b4 00 	call	0x168	; 0x168 <main>
  8e:	0c 94 0b 01 	jmp	0x216	; 0x216 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <separarDigitos>:

const int DELAY = 1;
const uint8_t BCDTABLE[10] = {0b00111111, 0b00000110, 0b01011011, 0b01001111, 0b01100110, 0b01101101, 0b01111101, 0b00000111, 0b01111111, 0b01101111};

// Obtener centesima de segundo, segundo, decima y centesima del contador;
void separarDigitos(uint8_t* contador, uint8_t* centesima1, uint8_t* segundo, uint8_t* decima, uint8_t* centesima2) {
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	fb 01       	movw	r30, r22
  a0:	ea 01       	movw	r28, r20
		int aux = 0;
		aux = *contador;
  a2:	dc 01       	movw	r26, r24
  a4:	8c 91       	ld	r24, X
  a6:	90 e0       	ldi	r25, 0x00	; 0
		if(aux != 0){
  a8:	00 97       	sbiw	r24, 0x00	; 0
  aa:	39 f0       	breq	.+14     	; 0xba <separarDigitos+0x24>
			*centesima1 = aux % 10;
  ac:	6a e0       	ldi	r22, 0x0A	; 10
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <__divmodhi4>
  b4:	80 83       	st	Z, r24
			aux = aux / 10;
  b6:	86 2f       	mov	r24, r22
  b8:	97 2f       	mov	r25, r23
		}
		if(aux !=0){
  ba:	00 97       	sbiw	r24, 0x00	; 0
  bc:	39 f0       	breq	.+14     	; 0xcc <separarDigitos+0x36>
			*segundo = aux % 10;
  be:	6a e0       	ldi	r22, 0x0A	; 10
  c0:	70 e0       	ldi	r23, 0x00	; 0
  c2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <__divmodhi4>
  c6:	88 83       	st	Y, r24
			aux = aux / 10;
  c8:	86 2f       	mov	r24, r22
  ca:	97 2f       	mov	r25, r23
		}
		if(aux != 0){
  cc:	00 97       	sbiw	r24, 0x00	; 0
  ce:	41 f0       	breq	.+16     	; 0xe0 <separarDigitos+0x4a>
			*decima = aux % 10;
  d0:	6a e0       	ldi	r22, 0x0A	; 10
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <__divmodhi4>
  d8:	f9 01       	movw	r30, r18
  da:	80 83       	st	Z, r24
			aux = aux / 10;
  dc:	86 2f       	mov	r24, r22
  de:	97 2f       	mov	r25, r23
		}
		if(aux != 0){
  e0:	00 97       	sbiw	r24, 0x00	; 0
  e2:	31 f0       	breq	.+12     	; 0xf0 <separarDigitos+0x5a>
			*centesima2 = aux % 10;
  e4:	6a e0       	ldi	r22, 0x0A	; 10
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <__divmodhi4>
  ec:	d8 01       	movw	r26, r16
  ee:	8c 93       	st	X, r24
		}
	}
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	1f 91       	pop	r17
  f6:	0f 91       	pop	r16
  f8:	08 95       	ret

000000fa <showDisplays>:

// Por cada DELAY ms, muestro el valor que le corresponde a cada digito en el dispositivo de 7 segmentos.
void showDisplays(int centesima1, int segundo, int decima, int centesima2){
		PORTB = BCDTABLE[centesima1];
  fa:	80 50       	subi	r24, 0x00	; 0
  fc:	9f 4f       	sbci	r25, 0xFF	; 255
  fe:	fc 01       	movw	r30, r24
 100:	90 81       	ld	r25, Z
 102:	95 b9       	out	0x05, r25	; 5
		PORTC = 0b00000001;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	ef e9       	ldi	r30, 0x9F	; 159
 10a:	ff e0       	ldi	r31, 0x0F	; 15
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <showDisplays+0x12>
 110:	00 c0       	rjmp	.+0      	; 0x112 <showDisplays+0x18>
 112:	00 00       	nop
		_delay_ms(DELAY);
		PORTB = BCDTABLE[segundo];
 114:	fb 01       	movw	r30, r22
 116:	e0 50       	subi	r30, 0x00	; 0
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	60 81       	ld	r22, Z
 11c:	65 b9       	out	0x05, r22	; 5
		PORTC = 0b00000010;
 11e:	62 e0       	ldi	r22, 0x02	; 2
 120:	68 b9       	out	0x08, r22	; 8
 122:	ef e9       	ldi	r30, 0x9F	; 159
 124:	ff e0       	ldi	r31, 0x0F	; 15
 126:	31 97       	sbiw	r30, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <showDisplays+0x2c>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <showDisplays+0x32>
 12c:	00 00       	nop
		_delay_ms(DELAY);
		PORTB = BCDTABLE[decima];
 12e:	fa 01       	movw	r30, r20
 130:	e0 50       	subi	r30, 0x00	; 0
 132:	ff 4f       	sbci	r31, 0xFF	; 255
 134:	40 81       	ld	r20, Z
 136:	45 b9       	out	0x05, r20	; 5
		PORTC = 0b00000100;
 138:	44 e0       	ldi	r20, 0x04	; 4
 13a:	48 b9       	out	0x08, r20	; 8
 13c:	ef e9       	ldi	r30, 0x9F	; 159
 13e:	ff e0       	ldi	r31, 0x0F	; 15
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <showDisplays+0x46>
 144:	00 c0       	rjmp	.+0      	; 0x146 <showDisplays+0x4c>
 146:	00 00       	nop
		_delay_ms(DELAY);
		PORTB = BCDTABLE[centesima2];
 148:	f9 01       	movw	r30, r18
 14a:	e0 50       	subi	r30, 0x00	; 0
 14c:	ff 4f       	sbci	r31, 0xFF	; 255
 14e:	20 81       	ld	r18, Z
 150:	25 b9       	out	0x05, r18	; 5
		PORTC = 0b00001000;
 152:	28 e0       	ldi	r18, 0x08	; 8
 154:	28 b9       	out	0x08, r18	; 8
 156:	ef e9       	ldi	r30, 0x9F	; 159
 158:	ff e0       	ldi	r31, 0x0F	; 15
 15a:	31 97       	sbiw	r30, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <showDisplays+0x60>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <showDisplays+0x66>
 160:	00 00       	nop
		_delay_ms(DELAY);
		PORTB = BCDTABLE[centesima1];
 162:	95 b9       	out	0x05, r25	; 5
		PORTC = 0b00000001;
 164:	88 b9       	out	0x08, r24	; 8
 166:	08 95       	ret

00000168 <main>:
	}

int main(void)
{
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	00 d0       	rcall	.+0      	; 0x16e <main+0x6>
 16e:	00 d0       	rcall	.+0      	; 0x170 <main+0x8>
 170:	1f 92       	push	r1
 172:	cd b7       	in	r28, 0x3d	; 61
 174:	de b7       	in	r29, 0x3e	; 62
	uint8_t contador = 0;
 176:	19 82       	std	Y+1, r1	; 0x01
	uint8_t centesima1 = 0;
 178:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t segundo = 0;
 17a:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t decima = 0;
 17c:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t centesima2 = 0;
 17e:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t start = 0;
	
	DDRB = 0xFF; // Seteamos todos los puertos de B como Output
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x0F; // Seteamos los primero 4 puertos de C como Output
 184:	8f e0       	ldi	r24, 0x0F	; 15
 186:	87 b9       	out	0x07, r24	; 7
	// Los primeros 4 puertos los utilizamos para definir que segmento mostramos en ese instante de tiempo
	
	// Para los pulsadores de STOP, START y RESET.
	DDRD = 0x00;
 188:	1a b8       	out	0x0a, r1	; 10
	
    while (1) 
    {		
		separarDigitos(&contador, &centesima1, &segundo, &decima, &centesima2);
 18a:	8e 01       	movw	r16, r28
 18c:	0b 5f       	subi	r16, 0xFB	; 251
 18e:	1f 4f       	sbci	r17, 0xFF	; 255
 190:	9e 01       	movw	r18, r28
 192:	2c 5f       	subi	r18, 0xFC	; 252
 194:	3f 4f       	sbci	r19, 0xFF	; 255
 196:	ae 01       	movw	r20, r28
 198:	4d 5f       	subi	r20, 0xFD	; 253
 19a:	5f 4f       	sbci	r21, 0xFF	; 255
 19c:	be 01       	movw	r22, r28
 19e:	6e 5f       	subi	r22, 0xFE	; 254
 1a0:	7f 4f       	sbci	r23, 0xFF	; 255
 1a2:	ce 01       	movw	r24, r28
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	0e 94 4b 00 	call	0x96	; 0x96 <separarDigitos>
		contador++;
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	8f 5f       	subi	r24, 0xFF	; 255
 1ae:	89 83       	std	Y+1, r24	; 0x01
		showDisplays(centesima1, segundo, decima, centesima2);
 1b0:	2d 81       	ldd	r18, Y+5	; 0x05
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	4c 81       	ldd	r20, Y+4	; 0x04
 1b6:	50 e0       	ldi	r21, 0x00	; 0
 1b8:	6b 81       	ldd	r22, Y+3	; 0x03
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	8a 81       	ldd	r24, Y+2	; 0x02
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 7d 00 	call	0xfa	; 0xfa <showDisplays>
 1c4:	e2 cf       	rjmp	.-60     	; 0x18a <main+0x22>

000001c6 <__divmodhi4>:
 1c6:	97 fb       	bst	r25, 7
 1c8:	07 2e       	mov	r0, r23
 1ca:	16 f4       	brtc	.+4      	; 0x1d0 <__divmodhi4+0xa>
 1cc:	00 94       	com	r0
 1ce:	07 d0       	rcall	.+14     	; 0x1de <__divmodhi4_neg1>
 1d0:	77 fd       	sbrc	r23, 7
 1d2:	09 d0       	rcall	.+18     	; 0x1e6 <__divmodhi4_neg2>
 1d4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <__udivmodhi4>
 1d8:	07 fc       	sbrc	r0, 7
 1da:	05 d0       	rcall	.+10     	; 0x1e6 <__divmodhi4_neg2>
 1dc:	3e f4       	brtc	.+14     	; 0x1ec <__divmodhi4_exit>

000001de <__divmodhi4_neg1>:
 1de:	90 95       	com	r25
 1e0:	81 95       	neg	r24
 1e2:	9f 4f       	sbci	r25, 0xFF	; 255
 1e4:	08 95       	ret

000001e6 <__divmodhi4_neg2>:
 1e6:	70 95       	com	r23
 1e8:	61 95       	neg	r22
 1ea:	7f 4f       	sbci	r23, 0xFF	; 255

000001ec <__divmodhi4_exit>:
 1ec:	08 95       	ret

000001ee <__udivmodhi4>:
 1ee:	aa 1b       	sub	r26, r26
 1f0:	bb 1b       	sub	r27, r27
 1f2:	51 e1       	ldi	r21, 0x11	; 17
 1f4:	07 c0       	rjmp	.+14     	; 0x204 <__udivmodhi4_ep>

000001f6 <__udivmodhi4_loop>:
 1f6:	aa 1f       	adc	r26, r26
 1f8:	bb 1f       	adc	r27, r27
 1fa:	a6 17       	cp	r26, r22
 1fc:	b7 07       	cpc	r27, r23
 1fe:	10 f0       	brcs	.+4      	; 0x204 <__udivmodhi4_ep>
 200:	a6 1b       	sub	r26, r22
 202:	b7 0b       	sbc	r27, r23

00000204 <__udivmodhi4_ep>:
 204:	88 1f       	adc	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	5a 95       	dec	r21
 20a:	a9 f7       	brne	.-22     	; 0x1f6 <__udivmodhi4_loop>
 20c:	80 95       	com	r24
 20e:	90 95       	com	r25
 210:	bc 01       	movw	r22, r24
 212:	cd 01       	movw	r24, r26
 214:	08 95       	ret

00000216 <_exit>:
 216:	f8 94       	cli

00000218 <__stop_program>:
 218:	ff cf       	rjmp	.-2      	; 0x218 <__stop_program>
