
Entregable2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000c9a  00000d2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  0080012a  0080012a  00000d58  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e0b  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c2b  00000000  00000000  00002da3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010e1  00000000  00000000  000039ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f8  00000000  00000000  00004ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000077f  00000000  00000000  00004ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001103  00000000  00000000  00005627  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  0000672a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__ctors_end>
   4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  10:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  1c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  30:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  34:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  38:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__vector_14>
  3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  40:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  44:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  58:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  5c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  60:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  68:	fa 03       	fmulsu	r23, r18
  6a:	36 04       	cpc	r3, r6
  6c:	57 04       	cpc	r5, r7
  6e:	76 04       	cpc	r7, r6
  70:	94 04       	cpc	r9, r4
  72:	bc 04       	cpc	r11, r12
  74:	ae 04       	cpc	r10, r14
  76:	ca 04       	cpc	r12, r10
  78:	16 05       	cpc	r17, r6
  7a:	62 05       	cpc	r22, r2

0000007c <LcdCustomChar>:
  7c:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  8c:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  9c:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  ac:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000bc <__ctors_end>:
  bc:	11 24       	eor	r1, r1
  be:	1f be       	out	0x3f, r1	; 63
  c0:	cf ef       	ldi	r28, 0xFF	; 255
  c2:	d8 e0       	ldi	r29, 0x08	; 8
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
  c8:	11 e0       	ldi	r17, 0x01	; 1
  ca:	a0 e0       	ldi	r26, 0x00	; 0
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	ea e9       	ldi	r30, 0x9A	; 154
  d0:	fc e0       	ldi	r31, 0x0C	; 12
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x10>
  d4:	05 90       	lpm	r0, Z+
  d6:	0d 92       	st	X+, r0
  d8:	aa 32       	cpi	r26, 0x2A	; 42
  da:	b1 07       	cpc	r27, r17
  dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0xc>

000000de <__do_clear_bss>:
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	aa e2       	ldi	r26, 0x2A	; 42
  e2:	b1 e0       	ldi	r27, 0x01	; 1
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
  e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
  e8:	ac 33       	cpi	r26, 0x3C	; 60
  ea:	b2 07       	cpc	r27, r18
  ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>
  ee:	0e 94 41 03 	call	0x682	; 0x682 <main>
  f2:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <_exit>

000000f6 <__bad_interrupt>:
  f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <KEYPAD_Scan>:
									'C', '7', '9', '8', 
									'D', '*', '#' ,'0'
								};


uint8_t KEYPAD_Scan(uint8_t *key){
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	00 d0       	rcall	.+0      	; 0x102 <KEYPAD_Scan+0x8>
 102:	1f 92       	push	r1
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
 108:	dc 01       	movw	r26, r24
		// Entradas
		DDRB &= (0b11100110);
 10a:	84 b1       	in	r24, 0x04	; 4
 10c:	86 7e       	andi	r24, 0xE6	; 230
 10e:	84 b9       	out	0x04, r24	; 4
		DDRD &= (0b01111111);
 110:	8a b1       	in	r24, 0x0a	; 10
 112:	8f 77       	andi	r24, 0x7F	; 127
 114:	8a b9       	out	0x0a, r24	; 10
		
		PORTB |= (0b00011001);
 116:	85 b1       	in	r24, 0x05	; 5
 118:	89 61       	ori	r24, 0x19	; 25
 11a:	85 b9       	out	0x05, r24	; 5
		PORTD |= (0b10000000);
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	80 68       	ori	r24, 0x80	; 128
 120:	8b b9       	out	0x0b, r24	; 11
		
		// Salidas
		DDRD |= (0b00111100);
 122:	8a b1       	in	r24, 0x0a	; 10
 124:	8c 63       	ori	r24, 0x3C	; 60
 126:	8a b9       	out	0x0a, r24	; 10
		
		uint8_t mascarasPINB[3] = {0b00010000, 0b00001000, 0b00000001};
 128:	80 e1       	ldi	r24, 0x10	; 16
 12a:	89 83       	std	Y+1, r24	; 0x01
 12c:	88 e0       	ldi	r24, 0x08	; 8
 12e:	8a 83       	std	Y+2, r24	; 0x02
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	8b 83       	std	Y+3, r24	; 0x03
		uint8_t mascaraPIND = 0b10000000;
		
		for (uint8_t c = 0; c < 4; c++) {
 134:	10 e0       	ldi	r17, 0x00	; 0
 136:	3b c0       	rjmp	.+118    	; 0x1ae <KEYPAD_Scan+0xb4>
			PORTD |= (0b00111100);
 138:	8b b1       	in	r24, 0x0b	; 11
 13a:	8c 63       	ori	r24, 0x3C	; 60
 13c:	8b b9       	out	0x0b, r24	; 11
			PORTD &= ~(1 << (c+2));
 13e:	8b b1       	in	r24, 0x0b	; 11
 140:	61 2f       	mov	r22, r17
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	ab 01       	movw	r20, r22
 146:	4e 5f       	subi	r20, 0xFE	; 254
 148:	5f 4f       	sbci	r21, 0xFF	; 255
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <KEYPAD_Scan+0x5a>
 150:	22 0f       	add	r18, r18
 152:	33 1f       	adc	r19, r19
 154:	4a 95       	dec	r20
 156:	e2 f7       	brpl	.-8      	; 0x150 <KEYPAD_Scan+0x56>
 158:	20 95       	com	r18
 15a:	28 23       	and	r18, r24
 15c:	2b b9       	out	0x0b, r18	; 11
			
			for (uint8_t f = 0; f < 3; f++) {
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	1a c0       	rjmp	.+52     	; 0x196 <KEYPAD_Scan+0x9c>
				if(!(PINB & mascarasPINB[f])){
 162:	83 b1       	in	r24, 0x03	; 3
 164:	49 2f       	mov	r20, r25
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	e1 e0       	ldi	r30, 0x01	; 1
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	ec 0f       	add	r30, r28
 16e:	fd 1f       	adc	r31, r29
 170:	e4 0f       	add	r30, r20
 172:	f5 1f       	adc	r31, r21
 174:	20 81       	ld	r18, Z
 176:	28 23       	and	r18, r24
 178:	69 f4       	brne	.+26     	; 0x194 <KEYPAD_Scan+0x9a>
					*key = matriz[f][c];
 17a:	44 0f       	add	r20, r20
 17c:	55 1f       	adc	r21, r21
 17e:	44 0f       	add	r20, r20
 180:	55 1f       	adc	r21, r21
 182:	40 50       	subi	r20, 0x00	; 0
 184:	5f 4f       	sbci	r21, 0xFF	; 255
 186:	fa 01       	movw	r30, r20
 188:	e6 0f       	add	r30, r22
 18a:	f7 1f       	adc	r31, r23
 18c:	80 81       	ld	r24, Z
 18e:	8c 93       	st	X, r24
					// Esperar que se suelte el boton y delay para evitar rebotes adicionales.
					//while(!(PINB & mascarasPINB[f])){}
					//_delay_ms(100);
					return 1;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	10 c0       	rjmp	.+32     	; 0x1b4 <KEYPAD_Scan+0xba>
		
		for (uint8_t c = 0; c < 4; c++) {
			PORTD |= (0b00111100);
			PORTD &= ~(1 << (c+2));
			
			for (uint8_t f = 0; f < 3; f++) {
 194:	9f 5f       	subi	r25, 0xFF	; 255
 196:	93 30       	cpi	r25, 0x03	; 3
 198:	20 f3       	brcs	.-56     	; 0x162 <KEYPAD_Scan+0x68>
					//while(!(PINB & mascarasPINB[f])){}
					//_delay_ms(100);
					return 1;
				}
			}
			if(!(PIND & mascaraPIND)){
 19a:	4f 99       	sbic	0x09, 7	; 9
 19c:	07 c0       	rjmp	.+14     	; 0x1ac <KEYPAD_Scan+0xb2>
				*key = matriz[3][c];
 19e:	fb 01       	movw	r30, r22
 1a0:	e0 50       	subi	r30, 0x00	; 0
 1a2:	ff 4f       	sbci	r31, 0xFF	; 255
 1a4:	84 85       	ldd	r24, Z+12	; 0x0c
 1a6:	8c 93       	st	X, r24
				// Esperar que se suelte el boton y delay para evitar rebotes adicionales.
				//while(!(PIND & mascaraPIND)){}
				//_delay_ms(100);
				return 1;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	04 c0       	rjmp	.+8      	; 0x1b4 <KEYPAD_Scan+0xba>
		DDRD |= (0b00111100);
		
		uint8_t mascarasPINB[3] = {0b00010000, 0b00001000, 0b00000001};
		uint8_t mascaraPIND = 0b10000000;
		
		for (uint8_t c = 0; c < 4; c++) {
 1ac:	1f 5f       	subi	r17, 0xFF	; 255
 1ae:	14 30       	cpi	r17, 0x04	; 4
 1b0:	18 f2       	brcs	.-122    	; 0x138 <KEYPAD_Scan+0x3e>
				//while(!(PIND & mascaraPIND)){}
				//_delay_ms(100);
				return 1;
			}
		}
		return 0;
 1b2:	80 e0       	ldi	r24, 0x00	; 0
	
	
}
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	1f 91       	pop	r17
 1c0:	08 95       	ret

000001c2 <LCDsendChar>:
 1c2:	65 b1       	in	r22, 0x05	; 5
 1c4:	98 2f       	mov	r25, r24
 1c6:	90 74       	andi	r25, 0x40	; 64
 1c8:	49 2f       	mov	r20, r25
 1ca:	50 e0       	ldi	r21, 0x00	; 0
 1cc:	55 95       	asr	r21
 1ce:	47 95       	ror	r20
 1d0:	55 95       	asr	r21
 1d2:	47 95       	ror	r20
 1d4:	55 95       	asr	r21
 1d6:	47 95       	ror	r20
 1d8:	55 95       	asr	r21
 1da:	47 95       	ror	r20
 1dc:	98 2f       	mov	r25, r24
 1de:	90 78       	andi	r25, 0x80	; 128
 1e0:	29 2f       	mov	r18, r25
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	02 2e       	mov	r0, r18
 1e6:	23 2f       	mov	r18, r19
 1e8:	00 0c       	add	r0, r0
 1ea:	22 1f       	adc	r18, r18
 1ec:	33 0b       	sbc	r19, r19
 1ee:	00 0c       	add	r0, r0
 1f0:	22 1f       	adc	r18, r18
 1f2:	33 1f       	adc	r19, r19
 1f4:	96 2f       	mov	r25, r22
 1f6:	99 7f       	andi	r25, 0xF9	; 249
 1f8:	49 2b       	or	r20, r25
 1fa:	24 2b       	or	r18, r20
 1fc:	25 b9       	out	0x05, r18	; 5
 1fe:	68 b1       	in	r22, 0x08	; 8
 200:	98 2f       	mov	r25, r24
 202:	90 71       	andi	r25, 0x10	; 16
 204:	49 2f       	mov	r20, r25
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	55 95       	asr	r21
 20a:	47 95       	ror	r20
 20c:	55 95       	asr	r21
 20e:	47 95       	ror	r20
 210:	55 95       	asr	r21
 212:	47 95       	ror	r20
 214:	98 2f       	mov	r25, r24
 216:	90 72       	andi	r25, 0x20	; 32
 218:	29 2f       	mov	r18, r25
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	35 95       	asr	r19
 21e:	27 95       	ror	r18
 220:	35 95       	asr	r19
 222:	27 95       	ror	r18
 224:	35 95       	asr	r19
 226:	27 95       	ror	r18
 228:	96 2f       	mov	r25, r22
 22a:	99 7f       	andi	r25, 0xF9	; 249
 22c:	49 2b       	or	r20, r25
 22e:	24 2b       	or	r18, r20
 230:	28 b9       	out	0x08, r18	; 8
 232:	9b b1       	in	r25, 0x0b	; 11
 234:	92 60       	ori	r25, 0x02	; 2
 236:	9b b9       	out	0x0b, r25	; 11
 238:	9b b1       	in	r25, 0x0b	; 11
 23a:	91 60       	ori	r25, 0x01	; 1
 23c:	9b b9       	out	0x0b, r25	; 11
 23e:	25 ed       	ldi	r18, 0xD5	; 213
 240:	2a 95       	dec	r18
 242:	f1 f7       	brne	.-4      	; 0x240 <LCDsendChar+0x7e>
 244:	00 00       	nop
 246:	9b b1       	in	r25, 0x0b	; 11
 248:	9e 7f       	andi	r25, 0xFE	; 254
 24a:	9b b9       	out	0x0b, r25	; 11
 24c:	9b b1       	in	r25, 0x0b	; 11
 24e:	9d 7f       	andi	r25, 0xFD	; 253
 250:	9b b9       	out	0x0b, r25	; 11
 252:	95 ed       	ldi	r25, 0xD5	; 213
 254:	9a 95       	dec	r25
 256:	f1 f7       	brne	.-4      	; 0x254 <LCDsendChar+0x92>
 258:	00 00       	nop
 25a:	65 b1       	in	r22, 0x05	; 5
 25c:	20 e1       	ldi	r18, 0x10	; 16
 25e:	82 9f       	mul	r24, r18
 260:	c0 01       	movw	r24, r0
 262:	11 24       	eor	r1, r1
 264:	ac 01       	movw	r20, r24
 266:	40 74       	andi	r20, 0x40	; 64
 268:	55 27       	eor	r21, r21
 26a:	55 95       	asr	r21
 26c:	47 95       	ror	r20
 26e:	55 95       	asr	r21
 270:	47 95       	ror	r20
 272:	55 95       	asr	r21
 274:	47 95       	ror	r20
 276:	55 95       	asr	r21
 278:	47 95       	ror	r20
 27a:	9c 01       	movw	r18, r24
 27c:	20 78       	andi	r18, 0x80	; 128
 27e:	33 27       	eor	r19, r19
 280:	02 2e       	mov	r0, r18
 282:	23 2f       	mov	r18, r19
 284:	00 0c       	add	r0, r0
 286:	22 1f       	adc	r18, r18
 288:	33 0b       	sbc	r19, r19
 28a:	00 0c       	add	r0, r0
 28c:	22 1f       	adc	r18, r18
 28e:	33 1f       	adc	r19, r19
 290:	36 2f       	mov	r19, r22
 292:	39 7f       	andi	r19, 0xF9	; 249
 294:	43 2b       	or	r20, r19
 296:	24 2b       	or	r18, r20
 298:	25 b9       	out	0x05, r18	; 5
 29a:	48 b1       	in	r20, 0x08	; 8
 29c:	9c 01       	movw	r18, r24
 29e:	20 71       	andi	r18, 0x10	; 16
 2a0:	33 27       	eor	r19, r19
 2a2:	35 95       	asr	r19
 2a4:	27 95       	ror	r18
 2a6:	35 95       	asr	r19
 2a8:	27 95       	ror	r18
 2aa:	35 95       	asr	r19
 2ac:	27 95       	ror	r18
 2ae:	80 72       	andi	r24, 0x20	; 32
 2b0:	99 27       	eor	r25, r25
 2b2:	95 95       	asr	r25
 2b4:	87 95       	ror	r24
 2b6:	95 95       	asr	r25
 2b8:	87 95       	ror	r24
 2ba:	95 95       	asr	r25
 2bc:	87 95       	ror	r24
 2be:	94 2f       	mov	r25, r20
 2c0:	99 7f       	andi	r25, 0xF9	; 249
 2c2:	29 2b       	or	r18, r25
 2c4:	82 2b       	or	r24, r18
 2c6:	88 b9       	out	0x08, r24	; 8
 2c8:	8b b1       	in	r24, 0x0b	; 11
 2ca:	82 60       	ori	r24, 0x02	; 2
 2cc:	8b b9       	out	0x0b, r24	; 11
 2ce:	8b b1       	in	r24, 0x0b	; 11
 2d0:	81 60       	ori	r24, 0x01	; 1
 2d2:	8b b9       	out	0x0b, r24	; 11
 2d4:	85 ed       	ldi	r24, 0xD5	; 213
 2d6:	8a 95       	dec	r24
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <LCDsendChar+0x114>
 2da:	00 00       	nop
 2dc:	8b b1       	in	r24, 0x0b	; 11
 2de:	8e 7f       	andi	r24, 0xFE	; 254
 2e0:	8b b9       	out	0x0b, r24	; 11
 2e2:	8b b1       	in	r24, 0x0b	; 11
 2e4:	8d 7f       	andi	r24, 0xFD	; 253
 2e6:	8b b9       	out	0x0b, r24	; 11
 2e8:	95 ed       	ldi	r25, 0xD5	; 213
 2ea:	9a 95       	dec	r25
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <LCDsendChar+0x128>
 2ee:	00 00       	nop
 2f0:	08 95       	ret

000002f2 <LCDsendCommand>:
 2f2:	65 b1       	in	r22, 0x05	; 5
 2f4:	98 2f       	mov	r25, r24
 2f6:	90 74       	andi	r25, 0x40	; 64
 2f8:	49 2f       	mov	r20, r25
 2fa:	50 e0       	ldi	r21, 0x00	; 0
 2fc:	55 95       	asr	r21
 2fe:	47 95       	ror	r20
 300:	55 95       	asr	r21
 302:	47 95       	ror	r20
 304:	55 95       	asr	r21
 306:	47 95       	ror	r20
 308:	55 95       	asr	r21
 30a:	47 95       	ror	r20
 30c:	98 2f       	mov	r25, r24
 30e:	90 78       	andi	r25, 0x80	; 128
 310:	29 2f       	mov	r18, r25
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	02 2e       	mov	r0, r18
 316:	23 2f       	mov	r18, r19
 318:	00 0c       	add	r0, r0
 31a:	22 1f       	adc	r18, r18
 31c:	33 0b       	sbc	r19, r19
 31e:	00 0c       	add	r0, r0
 320:	22 1f       	adc	r18, r18
 322:	33 1f       	adc	r19, r19
 324:	96 2f       	mov	r25, r22
 326:	99 7f       	andi	r25, 0xF9	; 249
 328:	49 2b       	or	r20, r25
 32a:	24 2b       	or	r18, r20
 32c:	25 b9       	out	0x05, r18	; 5
 32e:	68 b1       	in	r22, 0x08	; 8
 330:	98 2f       	mov	r25, r24
 332:	90 71       	andi	r25, 0x10	; 16
 334:	49 2f       	mov	r20, r25
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	55 95       	asr	r21
 33a:	47 95       	ror	r20
 33c:	55 95       	asr	r21
 33e:	47 95       	ror	r20
 340:	55 95       	asr	r21
 342:	47 95       	ror	r20
 344:	98 2f       	mov	r25, r24
 346:	90 72       	andi	r25, 0x20	; 32
 348:	29 2f       	mov	r18, r25
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	35 95       	asr	r19
 34e:	27 95       	ror	r18
 350:	35 95       	asr	r19
 352:	27 95       	ror	r18
 354:	35 95       	asr	r19
 356:	27 95       	ror	r18
 358:	96 2f       	mov	r25, r22
 35a:	99 7f       	andi	r25, 0xF9	; 249
 35c:	49 2b       	or	r20, r25
 35e:	24 2b       	or	r18, r20
 360:	28 b9       	out	0x08, r18	; 8
 362:	9b b1       	in	r25, 0x0b	; 11
 364:	91 60       	ori	r25, 0x01	; 1
 366:	9b b9       	out	0x0b, r25	; 11
 368:	ef e9       	ldi	r30, 0x9F	; 159
 36a:	ff e0       	ldi	r31, 0x0F	; 15
 36c:	31 97       	sbiw	r30, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <LCDsendCommand+0x7a>
 370:	00 c0       	rjmp	.+0      	; 0x372 <LCDsendCommand+0x80>
 372:	00 00       	nop
 374:	9b b1       	in	r25, 0x0b	; 11
 376:	9e 7f       	andi	r25, 0xFE	; 254
 378:	9b b9       	out	0x0b, r25	; 11
 37a:	ef e9       	ldi	r30, 0x9F	; 159
 37c:	ff e0       	ldi	r31, 0x0F	; 15
 37e:	31 97       	sbiw	r30, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <LCDsendCommand+0x8c>
 382:	00 c0       	rjmp	.+0      	; 0x384 <LCDsendCommand+0x92>
 384:	00 00       	nop
 386:	65 b1       	in	r22, 0x05	; 5
 388:	f0 e1       	ldi	r31, 0x10	; 16
 38a:	8f 9f       	mul	r24, r31
 38c:	c0 01       	movw	r24, r0
 38e:	11 24       	eor	r1, r1
 390:	ac 01       	movw	r20, r24
 392:	40 74       	andi	r20, 0x40	; 64
 394:	55 27       	eor	r21, r21
 396:	55 95       	asr	r21
 398:	47 95       	ror	r20
 39a:	55 95       	asr	r21
 39c:	47 95       	ror	r20
 39e:	55 95       	asr	r21
 3a0:	47 95       	ror	r20
 3a2:	55 95       	asr	r21
 3a4:	47 95       	ror	r20
 3a6:	9c 01       	movw	r18, r24
 3a8:	20 78       	andi	r18, 0x80	; 128
 3aa:	33 27       	eor	r19, r19
 3ac:	02 2e       	mov	r0, r18
 3ae:	23 2f       	mov	r18, r19
 3b0:	00 0c       	add	r0, r0
 3b2:	22 1f       	adc	r18, r18
 3b4:	33 0b       	sbc	r19, r19
 3b6:	00 0c       	add	r0, r0
 3b8:	22 1f       	adc	r18, r18
 3ba:	33 1f       	adc	r19, r19
 3bc:	36 2f       	mov	r19, r22
 3be:	39 7f       	andi	r19, 0xF9	; 249
 3c0:	43 2b       	or	r20, r19
 3c2:	24 2b       	or	r18, r20
 3c4:	25 b9       	out	0x05, r18	; 5
 3c6:	48 b1       	in	r20, 0x08	; 8
 3c8:	9c 01       	movw	r18, r24
 3ca:	20 71       	andi	r18, 0x10	; 16
 3cc:	33 27       	eor	r19, r19
 3ce:	35 95       	asr	r19
 3d0:	27 95       	ror	r18
 3d2:	35 95       	asr	r19
 3d4:	27 95       	ror	r18
 3d6:	35 95       	asr	r19
 3d8:	27 95       	ror	r18
 3da:	80 72       	andi	r24, 0x20	; 32
 3dc:	99 27       	eor	r25, r25
 3de:	95 95       	asr	r25
 3e0:	87 95       	ror	r24
 3e2:	95 95       	asr	r25
 3e4:	87 95       	ror	r24
 3e6:	95 95       	asr	r25
 3e8:	87 95       	ror	r24
 3ea:	94 2f       	mov	r25, r20
 3ec:	99 7f       	andi	r25, 0xF9	; 249
 3ee:	29 2b       	or	r18, r25
 3f0:	82 2b       	or	r24, r18
 3f2:	88 b9       	out	0x08, r24	; 8
 3f4:	8b b1       	in	r24, 0x0b	; 11
 3f6:	81 60       	ori	r24, 0x01	; 1
 3f8:	8b b9       	out	0x0b, r24	; 11
 3fa:	8f e9       	ldi	r24, 0x9F	; 159
 3fc:	9f e0       	ldi	r25, 0x0F	; 15
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <LCDsendCommand+0x10c>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 404:	00 00       	nop
 406:	8b b1       	in	r24, 0x0b	; 11
 408:	8e 7f       	andi	r24, 0xFE	; 254
 40a:	8b b9       	out	0x0b, r24	; 11
 40c:	ef e9       	ldi	r30, 0x9F	; 159
 40e:	ff e0       	ldi	r31, 0x0F	; 15
 410:	31 97       	sbiw	r30, 0x01	; 1
 412:	f1 f7       	brne	.-4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 414:	00 c0       	rjmp	.+0      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 416:	00 00       	nop
 418:	08 95       	ret

0000041a <LCDclr>:
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCDsendCommand>
 420:	08 95       	ret

00000422 <LCDstring>:
 422:	0f 93       	push	r16
 424:	1f 93       	push	r17
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	00 97       	sbiw	r24, 0x00	; 0
 42c:	69 f0       	breq	.+26     	; 0x448 <LCDstring+0x26>
 42e:	d6 2f       	mov	r29, r22
 430:	8c 01       	movw	r16, r24
 432:	c0 e0       	ldi	r28, 0x00	; 0
 434:	07 c0       	rjmp	.+14     	; 0x444 <LCDstring+0x22>
 436:	f8 01       	movw	r30, r16
 438:	ec 0f       	add	r30, r28
 43a:	f1 1d       	adc	r31, r1
 43c:	80 81       	ld	r24, Z
 43e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDsendChar>
 442:	cf 5f       	subi	r28, 0xFF	; 255
 444:	cd 17       	cp	r28, r29
 446:	b8 f3       	brcs	.-18     	; 0x436 <LCDstring+0x14>
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	1f 91       	pop	r17
 44e:	0f 91       	pop	r16
 450:	08 95       	ret

00000452 <LCDGotoXY>:
 452:	62 30       	cpi	r22, 0x02	; 2
 454:	31 f0       	breq	.+12     	; 0x462 <LCDGotoXY+0x10>
 456:	63 30       	cpi	r22, 0x03	; 3
 458:	31 f0       	breq	.+12     	; 0x466 <LCDGotoXY+0x14>
 45a:	61 30       	cpi	r22, 0x01	; 1
 45c:	29 f4       	brne	.+10     	; 0x468 <LCDGotoXY+0x16>
 45e:	80 5c       	subi	r24, 0xC0	; 192
 460:	03 c0       	rjmp	.+6      	; 0x468 <LCDGotoXY+0x16>
 462:	8c 5e       	subi	r24, 0xEC	; 236
 464:	01 c0       	rjmp	.+2      	; 0x468 <LCDGotoXY+0x16>
 466:	8c 5a       	subi	r24, 0xAC	; 172
 468:	80 68       	ori	r24, 0x80	; 128
 46a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCDsendCommand>
 46e:	08 95       	ret

00000470 <LCDdefinechar>:
 470:	ef 92       	push	r14
 472:	ff 92       	push	r15
 474:	0f 93       	push	r16
 476:	1f 93       	push	r17
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
 47c:	7c 01       	movw	r14, r24
 47e:	86 2f       	mov	r24, r22
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	88 0f       	add	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	80 64       	ori	r24, 0x40	; 64
 490:	c0 e0       	ldi	r28, 0x00	; 0
 492:	d0 e0       	ldi	r29, 0x00	; 0
 494:	0d c0       	rjmp	.+26     	; 0x4b0 <LCDdefinechar+0x40>
 496:	f7 01       	movw	r30, r14
 498:	ec 0f       	add	r30, r28
 49a:	fd 1f       	adc	r31, r29
 49c:	14 91       	lpm	r17, Z
 49e:	01 e0       	ldi	r16, 0x01	; 1
 4a0:	08 0f       	add	r16, r24
 4a2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCDsendCommand>
 4a6:	81 2f       	mov	r24, r17
 4a8:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDsendChar>
 4ac:	21 96       	adiw	r28, 0x01	; 1
 4ae:	80 2f       	mov	r24, r16
 4b0:	c8 30       	cpi	r28, 0x08	; 8
 4b2:	d1 05       	cpc	r29, r1
 4b4:	80 f3       	brcs	.-32     	; 0x496 <LCDdefinechar+0x26>
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	1f 91       	pop	r17
 4bc:	0f 91       	pop	r16
 4be:	ff 90       	pop	r15
 4c0:	ef 90       	pop	r14
 4c2:	08 95       	ret

000004c4 <LCDinit>:
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	8f e5       	ldi	r24, 0x5F	; 95
 4ca:	9a ee       	ldi	r25, 0xEA	; 234
 4cc:	01 97       	sbiw	r24, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <LCDinit+0x8>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <LCDinit+0xe>
 4d2:	00 00       	nop
 4d4:	85 b1       	in	r24, 0x05	; 5
 4d6:	89 7f       	andi	r24, 0xF9	; 249
 4d8:	85 b9       	out	0x05, r24	; 5
 4da:	88 b1       	in	r24, 0x08	; 8
 4dc:	89 7f       	andi	r24, 0xF9	; 249
 4de:	88 b9       	out	0x08, r24	; 8
 4e0:	1b b8       	out	0x0b, r1	; 11
 4e2:	87 b1       	in	r24, 0x07	; 7
 4e4:	86 60       	ori	r24, 0x06	; 6
 4e6:	87 b9       	out	0x07, r24	; 7
 4e8:	84 b1       	in	r24, 0x04	; 4
 4ea:	86 60       	ori	r24, 0x06	; 6
 4ec:	84 b9       	out	0x04, r24	; 4
 4ee:	84 b1       	in	r24, 0x04	; 4
 4f0:	86 60       	ori	r24, 0x06	; 6
 4f2:	84 b9       	out	0x04, r24	; 4
 4f4:	87 b1       	in	r24, 0x07	; 7
 4f6:	86 60       	ori	r24, 0x06	; 6
 4f8:	87 b9       	out	0x07, r24	; 7
 4fa:	8a b1       	in	r24, 0x0a	; 10
 4fc:	83 60       	ori	r24, 0x03	; 3
 4fe:	8a b9       	out	0x0a, r24	; 10
 500:	85 b1       	in	r24, 0x05	; 5
 502:	89 7f       	andi	r24, 0xF9	; 249
 504:	85 b9       	out	0x05, r24	; 5
 506:	88 b1       	in	r24, 0x08	; 8
 508:	86 60       	ori	r24, 0x06	; 6
 50a:	88 b9       	out	0x08, r24	; 8
 50c:	8b b1       	in	r24, 0x0b	; 11
 50e:	81 60       	ori	r24, 0x01	; 1
 510:	8b b9       	out	0x0b, r24	; 11
 512:	8f e9       	ldi	r24, 0x9F	; 159
 514:	9f e0       	ldi	r25, 0x0F	; 15
 516:	01 97       	sbiw	r24, 0x01	; 1
 518:	f1 f7       	brne	.-4      	; 0x516 <LCDinit+0x52>
 51a:	00 c0       	rjmp	.+0      	; 0x51c <LCDinit+0x58>
 51c:	00 00       	nop
 51e:	8b b1       	in	r24, 0x0b	; 11
 520:	8e 7f       	andi	r24, 0xFE	; 254
 522:	8b b9       	out	0x0b, r24	; 11
 524:	8f e9       	ldi	r24, 0x9F	; 159
 526:	9f e0       	ldi	r25, 0x0F	; 15
 528:	01 97       	sbiw	r24, 0x01	; 1
 52a:	f1 f7       	brne	.-4      	; 0x528 <LCDinit+0x64>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <LCDinit+0x6a>
 52e:	00 00       	nop
 530:	85 b1       	in	r24, 0x05	; 5
 532:	89 7f       	andi	r24, 0xF9	; 249
 534:	85 b9       	out	0x05, r24	; 5
 536:	88 b1       	in	r24, 0x08	; 8
 538:	86 60       	ori	r24, 0x06	; 6
 53a:	88 b9       	out	0x08, r24	; 8
 53c:	8b b1       	in	r24, 0x0b	; 11
 53e:	81 60       	ori	r24, 0x01	; 1
 540:	8b b9       	out	0x0b, r24	; 11
 542:	8f e9       	ldi	r24, 0x9F	; 159
 544:	9f e0       	ldi	r25, 0x0F	; 15
 546:	01 97       	sbiw	r24, 0x01	; 1
 548:	f1 f7       	brne	.-4      	; 0x546 <LCDinit+0x82>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <LCDinit+0x88>
 54c:	00 00       	nop
 54e:	8b b1       	in	r24, 0x0b	; 11
 550:	8e 7f       	andi	r24, 0xFE	; 254
 552:	8b b9       	out	0x0b, r24	; 11
 554:	8f e9       	ldi	r24, 0x9F	; 159
 556:	9f e0       	ldi	r25, 0x0F	; 15
 558:	01 97       	sbiw	r24, 0x01	; 1
 55a:	f1 f7       	brne	.-4      	; 0x558 <LCDinit+0x94>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <LCDinit+0x9a>
 55e:	00 00       	nop
 560:	85 b1       	in	r24, 0x05	; 5
 562:	89 7f       	andi	r24, 0xF9	; 249
 564:	85 b9       	out	0x05, r24	; 5
 566:	88 b1       	in	r24, 0x08	; 8
 568:	89 7f       	andi	r24, 0xF9	; 249
 56a:	84 60       	ori	r24, 0x04	; 4
 56c:	88 b9       	out	0x08, r24	; 8
 56e:	8b b1       	in	r24, 0x0b	; 11
 570:	81 60       	ori	r24, 0x01	; 1
 572:	8b b9       	out	0x0b, r24	; 11
 574:	8f e9       	ldi	r24, 0x9F	; 159
 576:	9f e0       	ldi	r25, 0x0F	; 15
 578:	01 97       	sbiw	r24, 0x01	; 1
 57a:	f1 f7       	brne	.-4      	; 0x578 <LCDinit+0xb4>
 57c:	00 c0       	rjmp	.+0      	; 0x57e <LCDinit+0xba>
 57e:	00 00       	nop
 580:	8b b1       	in	r24, 0x0b	; 11
 582:	8e 7f       	andi	r24, 0xFE	; 254
 584:	8b b9       	out	0x0b, r24	; 11
 586:	8f e9       	ldi	r24, 0x9F	; 159
 588:	9f e0       	ldi	r25, 0x0F	; 15
 58a:	01 97       	sbiw	r24, 0x01	; 1
 58c:	f1 f7       	brne	.-4      	; 0x58a <LCDinit+0xc6>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <LCDinit+0xcc>
 590:	00 00       	nop
 592:	88 e2       	ldi	r24, 0x28	; 40
 594:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCDsendCommand>
 598:	8c e0       	ldi	r24, 0x0C	; 12
 59a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCDsendCommand>
 59e:	60 e0       	ldi	r22, 0x00	; 0
 5a0:	c0 e0       	ldi	r28, 0x00	; 0
 5a2:	0a c0       	rjmp	.+20     	; 0x5b8 <LCDinit+0xf4>
 5a4:	d1 e0       	ldi	r29, 0x01	; 1
 5a6:	d6 0f       	add	r29, r22
 5a8:	8c 2f       	mov	r24, r28
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	84 58       	subi	r24, 0x84	; 132
 5ae:	9f 4f       	sbci	r25, 0xFF	; 255
 5b0:	0e 94 38 02 	call	0x470	; 0x470 <LCDdefinechar>
 5b4:	c8 5f       	subi	r28, 0xF8	; 248
 5b6:	6d 2f       	mov	r22, r29
 5b8:	c0 34       	cpi	r28, 0x40	; 64
 5ba:	a0 f3       	brcs	.-24     	; 0x5a4 <LCDinit+0xe0>
 5bc:	df 91       	pop	r29
 5be:	cf 91       	pop	r28
 5c0:	08 95       	ret

000005c2 <LCDescribeDato>:
 5c2:	ef 92       	push	r14
 5c4:	ff 92       	push	r15
 5c6:	0f 93       	push	r16
 5c8:	1f 93       	push	r17
 5ca:	cf 93       	push	r28
 5cc:	df 93       	push	r29
 5ce:	00 d0       	rcall	.+0      	; 0x5d0 <LCDescribeDato+0xe>
 5d0:	00 d0       	rcall	.+0      	; 0x5d2 <LCDescribeDato+0x10>
 5d2:	1f 92       	push	r1
 5d4:	cd b7       	in	r28, 0x3d	; 61
 5d6:	de b7       	in	r29, 0x3e	; 62
 5d8:	7b 01       	movw	r14, r22
 5da:	fe 01       	movw	r30, r28
 5dc:	31 96       	adiw	r30, 0x01	; 1
 5de:	25 e0       	ldi	r18, 0x05	; 5
 5e0:	df 01       	movw	r26, r30
 5e2:	1d 92       	st	X+, r1
 5e4:	2a 95       	dec	r18
 5e6:	e9 f7       	brne	.-6      	; 0x5e2 <LCDescribeDato+0x20>
 5e8:	24 e0       	ldi	r18, 0x04	; 4
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	0f c0       	rjmp	.+30     	; 0x60c <LCDescribeDato+0x4a>
 5ee:	6a e0       	ldi	r22, 0x0A	; 10
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__divmodhi4>
 5f6:	e1 e0       	ldi	r30, 0x01	; 1
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	ec 0f       	add	r30, r28
 5fc:	fd 1f       	adc	r31, r29
 5fe:	e2 0f       	add	r30, r18
 600:	f3 1f       	adc	r31, r19
 602:	80 83       	st	Z, r24
 604:	86 2f       	mov	r24, r22
 606:	97 2f       	mov	r25, r23
 608:	21 50       	subi	r18, 0x01	; 1
 60a:	31 09       	sbc	r19, r1
 60c:	00 97       	sbiw	r24, 0x00	; 0
 60e:	79 f7       	brne	.-34     	; 0x5ee <LCDescribeDato+0x2c>
 610:	bf ef       	ldi	r27, 0xFF	; 255
 612:	eb 16       	cp	r14, r27
 614:	fb 06       	cpc	r15, r27
 616:	81 f4       	brne	.+32     	; 0x638 <LCDescribeDato+0x76>
 618:	03 c0       	rjmp	.+6      	; 0x620 <LCDescribeDato+0x5e>
 61a:	0f 5f       	subi	r16, 0xFF	; 255
 61c:	1f 4f       	sbci	r17, 0xFF	; 255
 61e:	02 c0       	rjmp	.+4      	; 0x624 <LCDescribeDato+0x62>
 620:	00 e0       	ldi	r16, 0x00	; 0
 622:	10 e0       	ldi	r17, 0x00	; 0
 624:	e1 e0       	ldi	r30, 0x01	; 1
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	ec 0f       	add	r30, r28
 62a:	fd 1f       	adc	r31, r29
 62c:	e0 0f       	add	r30, r16
 62e:	f1 1f       	adc	r31, r17
 630:	20 81       	ld	r18, Z
 632:	22 23       	and	r18, r18
 634:	91 f3       	breq	.-28     	; 0x61a <LCDescribeDato+0x58>
 636:	04 c0       	rjmp	.+8      	; 0x640 <LCDescribeDato+0x7e>
 638:	05 e0       	ldi	r16, 0x05	; 5
 63a:	10 e0       	ldi	r17, 0x00	; 0
 63c:	0e 19       	sub	r16, r14
 63e:	1f 09       	sbc	r17, r15
 640:	99 23       	and	r25, r25
 642:	84 f4       	brge	.+32     	; 0x664 <LCDescribeDato+0xa2>
 644:	8d e2       	ldi	r24, 0x2D	; 45
 646:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDsendChar>
 64a:	0c c0       	rjmp	.+24     	; 0x664 <LCDescribeDato+0xa2>
 64c:	e1 e0       	ldi	r30, 0x01	; 1
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	ec 0f       	add	r30, r28
 652:	fd 1f       	adc	r31, r29
 654:	e0 0f       	add	r30, r16
 656:	f1 1f       	adc	r31, r17
 658:	80 81       	ld	r24, Z
 65a:	80 5d       	subi	r24, 0xD0	; 208
 65c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDsendChar>
 660:	0f 5f       	subi	r16, 0xFF	; 255
 662:	1f 4f       	sbci	r17, 0xFF	; 255
 664:	05 30       	cpi	r16, 0x05	; 5
 666:	11 05       	cpc	r17, r1
 668:	8c f3       	brlt	.-30     	; 0x64c <LCDescribeDato+0x8a>
 66a:	0f 90       	pop	r0
 66c:	0f 90       	pop	r0
 66e:	0f 90       	pop	r0
 670:	0f 90       	pop	r0
 672:	0f 90       	pop	r0
 674:	df 91       	pop	r29
 676:	cf 91       	pop	r28
 678:	1f 91       	pop	r17
 67a:	0f 91       	pop	r16
 67c:	ff 90       	pop	r15
 67e:	ef 90       	pop	r14
 680:	08 95       	ret

00000682 <main>:
#include "common.h"


int main(void)
{
    LCDinit();
 682:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LCDinit>
	
	MEF_init();
 686:	0e 94 b9 03 	call	0x772	; 0x772 <MEF_init>
	
	TIMER0_Init();
 68a:	0e 94 ab 05 	call	0xb56	; 0xb56 <TIMER0_Init>
	
	
	
    while (1) 
    {
		sEOS_Dispatch_Tasks();
 68e:	0e 94 de 05 	call	0xbbc	; 0xbbc <sEOS_Dispatch_Tasks>
 692:	fd cf       	rjmp	.-6      	; 0x68e <main+0xc>

00000694 <isCorrectPassword>:
}

//Funcion privada 
static uint8_t isCorrectPassword(uint8_t * pass){
	
	if((pass[0] == '5') && (pass[1] == '9') && (pass[2] == '1') && (pass[3] == '3')){
 694:	fc 01       	movw	r30, r24
 696:	20 81       	ld	r18, Z
 698:	25 33       	cpi	r18, 0x35	; 53
 69a:	59 f4       	brne	.+22     	; 0x6b2 <isCorrectPassword+0x1e>
 69c:	21 81       	ldd	r18, Z+1	; 0x01
 69e:	29 33       	cpi	r18, 0x39	; 57
 6a0:	51 f4       	brne	.+20     	; 0x6b6 <isCorrectPassword+0x22>
 6a2:	22 81       	ldd	r18, Z+2	; 0x02
 6a4:	21 33       	cpi	r18, 0x31	; 49
 6a6:	49 f4       	brne	.+18     	; 0x6ba <isCorrectPassword+0x26>
 6a8:	83 81       	ldd	r24, Z+3	; 0x03
 6aa:	83 33       	cpi	r24, 0x33	; 51
 6ac:	41 f0       	breq	.+16     	; 0x6be <isCorrectPassword+0x2a>
		return 1;
	} else {
		return 0;
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	08 95       	ret
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	08 95       	ret
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	08 95       	ret
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	08 95       	ret

//Funcion privada 
static uint8_t isCorrectPassword(uint8_t * pass){
	
	if((pass[0] == '5') && (pass[1] == '9') && (pass[2] == '1') && (pass[3] == '3')){
		return 1;
 6be:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}
}
 6c0:	08 95       	ret

000006c2 <resetCallCountAndGoToState>:
static uint8_t data[2];
static uint8_t dataCount = 0;
static uint8_t num;
 
//Funcion privada
static void resetCallCountAndGoToState(uint8_t callCount, state st){
 6c2:	cf 93       	push	r28
		if (call_count == callCount)
 6c4:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <call_count>
 6c8:	98 13       	cpse	r25, r24
 6ca:	07 c0       	rjmp	.+14     	; 0x6da <resetCallCountAndGoToState+0x18>
 6cc:	c6 2f       	mov	r28, r22
		{
			LCDclr();
 6ce:	0e 94 0d 02 	call	0x41a	; 0x41a <LCDclr>
			call_count = 0;
 6d2:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <call_count>
			estado = st;
 6d6:	c0 93 34 01 	sts	0x0134, r28	; 0x800134 <estado>
		}
}
 6da:	cf 91       	pop	r28
 6dc:	08 95       	ret

000006de <handleInicio>:
	}
	
}

static void handleInicio(uint8_t * pass){
	switch(pass[0]){
 6de:	fc 01       	movw	r30, r24
 6e0:	80 81       	ld	r24, Z
 6e2:	81 34       	cpi	r24, 0x41	; 65
 6e4:	59 f0       	breq	.+22     	; 0x6fc <handleInicio+0x1e>
 6e6:	20 f4       	brcc	.+8      	; 0x6f0 <handleInicio+0x12>
 6e8:	80 53       	subi	r24, 0x30	; 48
 6ea:	8a 30       	cpi	r24, 0x0A	; 10
 6ec:	50 f1       	brcs	.+84     	; 0x742 <handleInicio+0x64>
 6ee:	08 95       	ret
 6f0:	83 34       	cpi	r24, 0x43	; 67
 6f2:	c1 f0       	breq	.+48     	; 0x724 <handleInicio+0x46>
 6f4:	68 f0       	brcs	.+26     	; 0x710 <handleInicio+0x32>
 6f6:	84 34       	cpi	r24, 0x44	; 68
 6f8:	f9 f0       	breq	.+62     	; 0x738 <handleInicio+0x5a>
 6fa:	08 95       	ret
		case 'A':
			estado = EdicionH;
 6fc:	87 e0       	ldi	r24, 0x07	; 7
 6fe:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <estado>
			LCDGotoXY(4,0);
 702:	60 e0       	ldi	r22, 0x00	; 0
 704:	84 e0       	ldi	r24, 0x04	; 4
 706:	0e 94 29 02 	call	0x452	; 0x452 <LCDGotoXY>
			call_count = 0;
 70a:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <call_count>
			break;
 70e:	08 95       	ret
		case 'B':
			estado = EdicionM;
 710:	88 e0       	ldi	r24, 0x08	; 8
 712:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <estado>
			LCDGotoXY(7,0);
 716:	60 e0       	ldi	r22, 0x00	; 0
 718:	87 e0       	ldi	r24, 0x07	; 7
 71a:	0e 94 29 02 	call	0x452	; 0x452 <LCDGotoXY>
			call_count = 0;
 71e:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <call_count>
			break;
 722:	08 95       	ret
		case 'C':
			estado = EdicionS;
 724:	89 e0       	ldi	r24, 0x09	; 9
 726:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <estado>
			LCDGotoXY(10,0);
 72a:	60 e0       	ldi	r22, 0x00	; 0
 72c:	8a e0       	ldi	r24, 0x0A	; 10
 72e:	0e 94 29 02 	call	0x452	; 0x452 <LCDGotoXY>
			call_count = 0;
 732:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <call_count>
			break;
 736:	08 95       	ret
		case 'D':
			estado = Inicio;
 738:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <estado>
			call_count = 0;
 73c:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <call_count>
			break;
 740:	08 95       	ret
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			estado = D0;
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <estado>
			call_count = 0;
 748:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <call_count>
 74c:	08 95       	ret

0000074e <MEF_readKey>:
		return 0;
	}
}

//Funcion privada 
static uint8_t MEF_readKey(uint8_t pos){
 74e:	cf 93       	push	r28
 750:	c8 2f       	mov	r28, r24
	if(!(KEYPAD_Scan(&key))){ //Cada 100 ms
 752:	81 e3       	ldi	r24, 0x31	; 49
 754:	91 e0       	ldi	r25, 0x01	; 1
 756:	0e 94 7d 00 	call	0xfa	; 0xfa <KEYPAD_Scan>
 75a:	88 23       	and	r24, r24
 75c:	41 f0       	breq	.+16     	; 0x76e <MEF_readKey+0x20>
		return 0;
		}else{
			password[pos] = key;
 75e:	ec 2f       	mov	r30, r28
 760:	f0 e0       	ldi	r31, 0x00	; 0
 762:	e3 5d       	subi	r30, 0xD3	; 211
 764:	fe 4f       	sbci	r31, 0xFE	; 254
 766:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <key>
 76a:	80 83       	st	Z, r24
		return 1;
 76c:	81 e0       	ldi	r24, 0x01	; 1
	}
	
}
 76e:	cf 91       	pop	r28
 770:	08 95       	ret

00000772 <MEF_init>:
			break;
	}
}

void MEF_init(){
	estado = Inicio;
 772:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <estado>
	call_count = 0;
 776:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <call_count>
	LCDclr();
 77a:	0e 94 0d 02 	call	0x41a	; 0x41a <LCDclr>
	LCDGotoXY(4, 0);
 77e:	60 e0       	ldi	r22, 0x00	; 0
 780:	84 e0       	ldi	r24, 0x04	; 4
 782:	0e 94 29 02 	call	0x452	; 0x452 <LCDGotoXY>
	LCDescribeDato(WATCH_getSeg(), 2);
 786:	0e 94 0b 06 	call	0xc16	; 0xc16 <WATCH_getSeg>
 78a:	62 e0       	ldi	r22, 0x02	; 2
 78c:	70 e0       	ldi	r23, 0x00	; 0
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCDescribeDato>
	LCDsendChar(':');
 794:	8a e3       	ldi	r24, 0x3A	; 58
 796:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDsendChar>
	LCDescribeDato(WATCH_getMin(), 2);
 79a:	0e 94 0e 06 	call	0xc1c	; 0xc1c <WATCH_getMin>
 79e:	62 e0       	ldi	r22, 0x02	; 2
 7a0:	70 e0       	ldi	r23, 0x00	; 0
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCDescribeDato>
	LCDsendChar(':');
 7a8:	8a e3       	ldi	r24, 0x3A	; 58
 7aa:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDsendChar>
	LCDescribeDato(WATCH_getHour(), 2);
 7ae:	0e 94 11 06 	call	0xc22	; 0xc22 <WATCH_getHour>
 7b2:	62 e0       	ldi	r22, 0x02	; 2
 7b4:	70 e0       	ldi	r23, 0x00	; 0
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCDescribeDato>
	LCDGotoXY(5, 1);
 7bc:	61 e0       	ldi	r22, 0x01	; 1
 7be:	85 e0       	ldi	r24, 0x05	; 5
 7c0:	0e 94 29 02 	call	0x452	; 0x452 <LCDGotoXY>
	LCDstring("CERRADO", 7);
 7c4:	67 e0       	ldi	r22, 0x07	; 7
 7c6:	80 e1       	ldi	r24, 0x10	; 16
 7c8:	91 e0       	ldi	r25, 0x01	; 1
 7ca:	0e 94 11 02 	call	0x422	; 0x422 <LCDstring>
 7ce:	08 95       	ret

000007d0 <MEF_update>:
}

void MEF_update(){ //Update cada 100 ms
	
	call_count++;
 7d0:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <call_count>
 7d4:	8f 5f       	subi	r24, 0xFF	; 255
 7d6:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <call_count>
	switch(estado)
 7da:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <estado>
 7de:	8e 2f       	mov	r24, r30
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	8a 30       	cpi	r24, 0x0A	; 10
 7e4:	91 05       	cpc	r25, r1
 7e6:	08 f0       	brcs	.+2      	; 0x7ea <MEF_update+0x1a>
 7e8:	b5 c1       	rjmp	.+874    	; 0xb54 <__stack+0x255>
 7ea:	fc 01       	movw	r30, r24
 7ec:	ec 5c       	subi	r30, 0xCC	; 204
 7ee:	ff 4f       	sbci	r31, 0xFF	; 255
 7f0:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__tablejump2__>
	{
		case Inicio:
			// Muestro la hora y el mensaje "CERRADO".
			LCDGotoXY(4, 0);
 7f4:	60 e0       	ldi	r22, 0x00	; 0
 7f6:	84 e0       	ldi	r24, 0x04	; 4
 7f8:	0e 94 29 02 	call	0x452	; 0x452 <LCDGotoXY>
			LCDescribeDato(WATCH_getHour(), 2);
 7fc:	0e 94 11 06 	call	0xc22	; 0xc22 <WATCH_getHour>
 800:	62 e0       	ldi	r22, 0x02	; 2
 802:	70 e0       	ldi	r23, 0x00	; 0
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCDescribeDato>
			LCDsendChar(':');
 80a:	8a e3       	ldi	r24, 0x3A	; 58
 80c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDsendChar>
			LCDescribeDato(WATCH_getMin(), 2);
 810:	0e 94 0e 06 	call	0xc1c	; 0xc1c <WATCH_getMin>
 814:	62 e0       	ldi	r22, 0x02	; 2
 816:	70 e0       	ldi	r23, 0x00	; 0
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCDescribeDato>
			LCDsendChar(':');
 81e:	8a e3       	ldi	r24, 0x3A	; 58
 820:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDsendChar>
			LCDescribeDato(WATCH_getSeg(), 2);
 824:	0e 94 0b 06 	call	0xc16	; 0xc16 <WATCH_getSeg>
 828:	62 e0       	ldi	r22, 0x02	; 2
 82a:	70 e0       	ldi	r23, 0x00	; 0
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCDescribeDato>
			LCDGotoXY(5, 1);
 832:	61 e0       	ldi	r22, 0x01	; 1
 834:	85 e0       	ldi	r24, 0x05	; 5
 836:	0e 94 29 02 	call	0x452	; 0x452 <LCDGotoXY>
			LCDstring("CERRADO", 7);
 83a:	67 e0       	ldi	r22, 0x07	; 7
 83c:	80 e1       	ldi	r24, 0x10	; 16
 83e:	91 e0       	ldi	r25, 0x01	; 1
 840:	0e 94 11 02 	call	0x422	; 0x422 <LCDstring>
			
			// Detectar que se presiono una tecla.
			if (++call_count_keypad == 3)
 844:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <call_count_keypad>
 848:	8f 5f       	subi	r24, 0xFF	; 255
 84a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <call_count_keypad>
 84e:	83 30       	cpi	r24, 0x03	; 3
 850:	09 f0       	breq	.+2      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 852:	80 c1       	rjmp	.+768    	; 0xb54 <__stack+0x255>
			{
				if(MEF_readKey(0)){
 854:	80 e0       	ldi	r24, 0x00	; 0
 856:	0e 94 a7 03 	call	0x74e	; 0x74e <MEF_readKey>
 85a:	88 23       	and	r24, r24
 85c:	21 f0       	breq	.+8      	; 0x866 <__DATA_REGION_LENGTH__+0x66>
					handleInicio(password);
 85e:	8d e2       	ldi	r24, 0x2D	; 45
 860:	91 e0       	ldi	r25, 0x01	; 1
 862:	0e 94 6f 03 	call	0x6de	; 0x6de <handleInicio>
				}
				call_count_keypad = 0;
 866:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <call_count_keypad>
 86a:	08 95       	ret
			
			
			break;
		
		case D0:
			LCDclr();
 86c:	0e 94 0d 02 	call	0x41a	; 0x41a <LCDclr>
			LCDGotoXY(5,1);
 870:	61 e0       	ldi	r22, 0x01	; 1
 872:	85 e0       	ldi	r24, 0x05	; 5
 874:	0e 94 29 02 	call	0x452	; 0x452 <LCDGotoXY>
			LCDsendChar('*');
 878:	8a e2       	ldi	r24, 0x2A	; 42
 87a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDsendChar>
			//LCDsendChar(password[0]);
			if (++call_count_keypad == 3)
 87e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <call_count_keypad>
 882:	8f 5f       	subi	r24, 0xFF	; 255
 884:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <call_count_keypad>
 888:	83 30       	cpi	r24, 0x03	; 3
 88a:	61 f4       	brne	.+24     	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
			{
				if(MEF_readKey(1)){
 88c:	81 e0       	ldi	r24, 0x01	; 1
 88e:	0e 94 a7 03 	call	0x74e	; 0x74e <MEF_readKey>
 892:	88 23       	and	r24, r24
 894:	29 f0       	breq	.+10     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
					call_count = 0;
 896:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <call_count>
					estado = D1;
 89a:	82 e0       	ldi	r24, 0x02	; 2
 89c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <estado>
				}
				call_count_keypad = 0;
 8a0:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <call_count_keypad>
			}
			
			resetCallCountAndGoToState(30, Inicio); //Si pasaron 3 sg y no se leyo ninguna tecla, vuelve al estado Inicio.
 8a4:	60 e0       	ldi	r22, 0x00	; 0
 8a6:	8e e1       	ldi	r24, 0x1E	; 30
 8a8:	0e 94 61 03 	call	0x6c2	; 0x6c2 <resetCallCountAndGoToState>
			break;
 8ac:	08 95       	ret
		
		case D1:
			LCDGotoXY(6,1);
 8ae:	61 e0       	ldi	r22, 0x01	; 1
 8b0:	86 e0       	ldi	r24, 0x06	; 6
 8b2:	0e 94 29 02 	call	0x452	; 0x452 <LCDGotoXY>
			LCDsendChar('*');
 8b6:	8a e2       	ldi	r24, 0x2A	; 42
 8b8:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDsendChar>
			//LCDsendChar(password[1]);
				if (++call_count_keypad == 3)
 8bc:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <call_count_keypad>
 8c0:	8f 5f       	subi	r24, 0xFF	; 255
 8c2:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <call_count_keypad>
 8c6:	83 30       	cpi	r24, 0x03	; 3
 8c8:	61 f4       	brne	.+24     	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
				{
					if(MEF_readKey(2)){
 8ca:	82 e0       	ldi	r24, 0x02	; 2
 8cc:	0e 94 a7 03 	call	0x74e	; 0x74e <MEF_readKey>
 8d0:	88 23       	and	r24, r24
 8d2:	29 f0       	breq	.+10     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
						call_count = 0;
 8d4:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <call_count>
						estado = D2;
 8d8:	83 e0       	ldi	r24, 0x03	; 3
 8da:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <estado>
					}
					call_count_keypad = 0;
 8de:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <call_count_keypad>
				}
			resetCallCountAndGoToState(30, Inicio);
 8e2:	60 e0       	ldi	r22, 0x00	; 0
 8e4:	8e e1       	ldi	r24, 0x1E	; 30
 8e6:	0e 94 61 03 	call	0x6c2	; 0x6c2 <resetCallCountAndGoToState>
			break;
 8ea:	08 95       	ret
		
		case D2:
			LCDGotoXY(7,1);
 8ec:	61 e0       	ldi	r22, 0x01	; 1
 8ee:	87 e0       	ldi	r24, 0x07	; 7
 8f0:	0e 94 29 02 	call	0x452	; 0x452 <LCDGotoXY>
			LCDsendChar('*');
 8f4:	8a e2       	ldi	r24, 0x2A	; 42
 8f6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDsendChar>
			//LCDsendChar(password[2]);
				if (++call_count_keypad == 3)
 8fa:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <call_count_keypad>
 8fe:	8f 5f       	subi	r24, 0xFF	; 255
 900:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <call_count_keypad>
 904:	83 30       	cpi	r24, 0x03	; 3
 906:	59 f4       	brne	.+22     	; 0x91e <__stack+0x1f>
				{
					if(MEF_readKey(3)){
 908:	0e 94 a7 03 	call	0x74e	; 0x74e <MEF_readKey>
 90c:	88 23       	and	r24, r24
 90e:	29 f0       	breq	.+10     	; 0x91a <__stack+0x1b>
						call_count = 0;
 910:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <call_count>
						estado = D3;
 914:	84 e0       	ldi	r24, 0x04	; 4
 916:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <estado>
					}
					call_count_keypad = 0;
 91a:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <call_count_keypad>
				}
			resetCallCountAndGoToState(30, Inicio);
 91e:	60 e0       	ldi	r22, 0x00	; 0
 920:	8e e1       	ldi	r24, 0x1E	; 30
 922:	0e 94 61 03 	call	0x6c2	; 0x6c2 <resetCallCountAndGoToState>
			break;
 926:	08 95       	ret
		
		case D3:
			// Al llegar a este estado, ya tengo los 4 caracteres ingresados.
			LCDGotoXY(8,1);
 928:	61 e0       	ldi	r22, 0x01	; 1
 92a:	88 e0       	ldi	r24, 0x08	; 8
 92c:	0e 94 29 02 	call	0x452	; 0x452 <LCDGotoXY>
			LCDsendChar(password[3]);
 930:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <password+0x3>
 934:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDsendChar>
			if (isCorrectPassword(password)) {
 938:	8d e2       	ldi	r24, 0x2D	; 45
 93a:	91 e0       	ldi	r25, 0x01	; 1
 93c:	0e 94 4a 03 	call	0x694	; 0x694 <isCorrectPassword>
 940:	88 23       	and	r24, r24
 942:	31 f0       	breq	.+12     	; 0x950 <__stack+0x51>
				call_count = 0;
 944:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <call_count>
				estado = Correcto;
 948:	85 e0       	ldi	r24, 0x05	; 5
 94a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <estado>
 94e:	08 95       	ret
			} else {
				call_count = 0;
 950:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <call_count>
				estado = Incorrecto;
 954:	86 e0       	ldi	r24, 0x06	; 6
 956:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <estado>
 95a:	08 95       	ret
			}
			break;
		
		case Incorrecto:
			// Se muestra el mensaje "DENEGADO" por dos segundos y vuelve al estado por defecto.
			LCDGotoXY(5,1);
 95c:	61 e0       	ldi	r22, 0x01	; 1
 95e:	85 e0       	ldi	r24, 0x05	; 5
 960:	0e 94 29 02 	call	0x452	; 0x452 <LCDGotoXY>
			LCDstring("DENEGADO", 8);			
 964:	68 e0       	ldi	r22, 0x08	; 8
 966:	88 e1       	ldi	r24, 0x18	; 24
 968:	91 e0       	ldi	r25, 0x01	; 1
 96a:	0e 94 11 02 	call	0x422	; 0x422 <LCDstring>
			// Pasaron 2 segundos.
			resetCallCountAndGoToState(20, Inicio);
 96e:	60 e0       	ldi	r22, 0x00	; 0
 970:	84 e1       	ldi	r24, 0x14	; 20
 972:	0e 94 61 03 	call	0x6c2	; 0x6c2 <resetCallCountAndGoToState>
			break;
 976:	08 95       	ret
		
		case Correcto:
			// Se muestra el mensaje "ABIERTO" por tres segundos y vuelve al estado por defecto.
			LCDGotoXY(5,1);
 978:	61 e0       	ldi	r22, 0x01	; 1
 97a:	85 e0       	ldi	r24, 0x05	; 5
 97c:	0e 94 29 02 	call	0x452	; 0x452 <LCDGotoXY>
			LCDstring("ABIERTO", 7);
 980:	67 e0       	ldi	r22, 0x07	; 7
 982:	81 e2       	ldi	r24, 0x21	; 33
 984:	91 e0       	ldi	r25, 0x01	; 1
 986:	0e 94 11 02 	call	0x422	; 0x422 <LCDstring>
			// Pasaron 3 segundos.
			resetCallCountAndGoToState(30, Inicio);
 98a:	60 e0       	ldi	r22, 0x00	; 0
 98c:	8e e1       	ldi	r24, 0x1E	; 30
 98e:	0e 94 61 03 	call	0x6c2	; 0x6c2 <resetCallCountAndGoToState>
			break;
 992:	08 95       	ret
		
		case EdicionH:
			if(++call_count_keypad == 3){
 994:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <call_count_keypad>
 998:	8f 5f       	subi	r24, 0xFF	; 255
 99a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <call_count_keypad>
 99e:	83 30       	cpi	r24, 0x03	; 3
 9a0:	09 f0       	breq	.+2      	; 0x9a4 <__stack+0xa5>
 9a2:	d8 c0       	rjmp	.+432    	; 0xb54 <__stack+0x255>
				call_count_keypad = 0;;
 9a4:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <call_count_keypad>
				if(MEF_readKey(0)){
 9a8:	80 e0       	ldi	r24, 0x00	; 0
 9aa:	0e 94 a7 03 	call	0x74e	; 0x74e <MEF_readKey>
 9ae:	88 23       	and	r24, r24
 9b0:	09 f4       	brne	.+2      	; 0x9b4 <__stack+0xb5>
 9b2:	d0 c0       	rjmp	.+416    	; 0xb54 <__stack+0x255>
					switch(password[0]){
 9b4:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <password>
 9b8:	8a 33       	cpi	r24, 0x3A	; 58
 9ba:	28 f4       	brcc	.+10     	; 0x9c6 <__stack+0xc7>
 9bc:	80 33       	cpi	r24, 0x30	; 48
 9be:	28 f5       	brcc	.+74     	; 0xa0a <__stack+0x10b>
 9c0:	83 32       	cpi	r24, 0x23	; 35
 9c2:	f1 f0       	breq	.+60     	; 0xa00 <__stack+0x101>
 9c4:	08 95       	ret
 9c6:	81 34       	cpi	r24, 0x41	; 65
 9c8:	09 f0       	breq	.+2      	; 0x9cc <__stack+0xcd>
 9ca:	c4 c0       	rjmp	.+392    	; 0xb54 <__stack+0x255>
						case 'A':
							// Guardar
							num = ( ((data[0] - '0')* 10) + (data[1] - '0'));
 9cc:	eb e2       	ldi	r30, 0x2B	; 43
 9ce:	f1 e0       	ldi	r31, 0x01	; 1
 9d0:	80 81       	ld	r24, Z
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	c0 97       	sbiw	r24, 0x30	; 48
 9d6:	91 81       	ldd	r25, Z+1	; 0x01
 9d8:	88 0f       	add	r24, r24
 9da:	28 2f       	mov	r18, r24
 9dc:	22 0f       	add	r18, r18
 9de:	22 0f       	add	r18, r18
 9e0:	82 0f       	add	r24, r18
 9e2:	89 0f       	add	r24, r25
 9e4:	80 53       	subi	r24, 0x30	; 48
							// dataCount == 2 significa que el usuario ingreso dos numeros
							if (dataCount == 2) {
 9e6:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <__data_end>
 9ea:	92 30       	cpi	r25, 0x02	; 2
 9ec:	21 f4       	brne	.+8      	; 0x9f6 <__stack+0xf7>
								if (num >= 0 && num <= 23) {
 9ee:	88 31       	cpi	r24, 0x18	; 24
 9f0:	10 f4       	brcc	.+4      	; 0x9f6 <__stack+0xf7>
									WATCH_setHour(num);	
 9f2:	0e 94 14 06 	call	0xc28	; 0xc28 <WATCH_setHour>
								}	
							}
							dataCount = 0;
 9f6:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
							estado = Inicio;
 9fa:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <estado>
						break;
 9fe:	08 95       	ret
					case '#':
						// Cancelar.
						estado = Inicio;
 a00:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <estado>
						dataCount = 0;
 a04:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
						break;
 a08:	08 95       	ret
					case '5':
					case '6':
					case '7':
					case '8':
					case '9':
						if(dataCount < 2) {
 a0a:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <__data_end>
 a0e:	e2 30       	cpi	r30, 0x02	; 2
 a10:	08 f0       	brcs	.+2      	; 0xa14 <__stack+0x115>
 a12:	a0 c0       	rjmp	.+320    	; 0xb54 <__stack+0x255>
							data[dataCount] = password[0];
 a14:	f0 e0       	ldi	r31, 0x00	; 0
 a16:	e5 5d       	subi	r30, 0xD5	; 213
 a18:	fe 4f       	sbci	r31, 0xFE	; 254
 a1a:	80 83       	st	Z, r24
							LCDsendChar(data[dataCount]);
 a1c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDsendChar>
							dataCount++;
 a20:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 a24:	8f 5f       	subi	r24, 0xFF	; 255
 a26:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
 a2a:	08 95       	ret
				call_count_keypad == 0;
			}
			break;
				
		case EdicionM:
		if(++call_count_keypad == 3){
 a2c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <call_count_keypad>
 a30:	8f 5f       	subi	r24, 0xFF	; 255
 a32:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <call_count_keypad>
 a36:	83 30       	cpi	r24, 0x03	; 3
 a38:	09 f0       	breq	.+2      	; 0xa3c <__stack+0x13d>
 a3a:	8c c0       	rjmp	.+280    	; 0xb54 <__stack+0x255>
			call_count_keypad = 0;;
 a3c:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <call_count_keypad>
			if(MEF_readKey(0)){
 a40:	80 e0       	ldi	r24, 0x00	; 0
 a42:	0e 94 a7 03 	call	0x74e	; 0x74e <MEF_readKey>
 a46:	88 23       	and	r24, r24
 a48:	09 f4       	brne	.+2      	; 0xa4c <__stack+0x14d>
 a4a:	84 c0       	rjmp	.+264    	; 0xb54 <__stack+0x255>
				switch(password[0]){
 a4c:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <password>
 a50:	8a 33       	cpi	r24, 0x3A	; 58
 a52:	28 f4       	brcc	.+10     	; 0xa5e <__stack+0x15f>
 a54:	80 33       	cpi	r24, 0x30	; 48
 a56:	28 f5       	brcc	.+74     	; 0xaa2 <__stack+0x1a3>
 a58:	83 32       	cpi	r24, 0x23	; 35
 a5a:	f1 f0       	breq	.+60     	; 0xa98 <__stack+0x199>
 a5c:	08 95       	ret
 a5e:	82 34       	cpi	r24, 0x42	; 66
 a60:	09 f0       	breq	.+2      	; 0xa64 <__stack+0x165>
 a62:	78 c0       	rjmp	.+240    	; 0xb54 <__stack+0x255>
					case 'B':
					// Guardar
					num = ( ((data[0] - '0')* 10) + (data[1] - '0'));
 a64:	eb e2       	ldi	r30, 0x2B	; 43
 a66:	f1 e0       	ldi	r31, 0x01	; 1
 a68:	80 81       	ld	r24, Z
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	c0 97       	sbiw	r24, 0x30	; 48
 a6e:	91 81       	ldd	r25, Z+1	; 0x01
 a70:	88 0f       	add	r24, r24
 a72:	28 2f       	mov	r18, r24
 a74:	22 0f       	add	r18, r18
 a76:	22 0f       	add	r18, r18
 a78:	82 0f       	add	r24, r18
 a7a:	89 0f       	add	r24, r25
 a7c:	80 53       	subi	r24, 0x30	; 48
					// dataCount == 2 significa que el usuario ingreso dos numeros
					if (dataCount == 2) {
 a7e:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <__data_end>
 a82:	92 30       	cpi	r25, 0x02	; 2
 a84:	21 f4       	brne	.+8      	; 0xa8e <__stack+0x18f>
						if (num >= 0 && num <= 59) {
 a86:	8c 33       	cpi	r24, 0x3C	; 60
 a88:	10 f4       	brcc	.+4      	; 0xa8e <__stack+0x18f>
							WATCH_setMinutes(num);
 a8a:	0e 94 17 06 	call	0xc2e	; 0xc2e <WATCH_setMinutes>
						}
					}
					dataCount = 0;
 a8e:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
					estado = Inicio;
 a92:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <estado>
					break;
 a96:	08 95       	ret
					case '#':
					// Cancelar.
					estado = Inicio;
 a98:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <estado>
					dataCount = 0;
 a9c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
					break;
 aa0:	08 95       	ret
					case '5':
					case '6':
					case '7':
					case '8':
					case '9':
					if(dataCount < 2) {
 aa2:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <__data_end>
 aa6:	e2 30       	cpi	r30, 0x02	; 2
 aa8:	08 f0       	brcs	.+2      	; 0xaac <__stack+0x1ad>
 aaa:	54 c0       	rjmp	.+168    	; 0xb54 <__stack+0x255>
						data[dataCount] = password[0];
 aac:	f0 e0       	ldi	r31, 0x00	; 0
 aae:	e5 5d       	subi	r30, 0xD5	; 213
 ab0:	fe 4f       	sbci	r31, 0xFE	; 254
 ab2:	80 83       	st	Z, r24
						LCDsendChar(data[dataCount]);
 ab4:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDsendChar>
						dataCount++;
 ab8:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 abc:	8f 5f       	subi	r24, 0xFF	; 255
 abe:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
 ac2:	08 95       	ret
			call_count_keypad == 0;
		}
		break;
		
		case EdicionS:
		if(++call_count_keypad == 3){
 ac4:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <call_count_keypad>
 ac8:	8f 5f       	subi	r24, 0xFF	; 255
 aca:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <call_count_keypad>
 ace:	83 30       	cpi	r24, 0x03	; 3
 ad0:	09 f0       	breq	.+2      	; 0xad4 <__stack+0x1d5>
 ad2:	40 c0       	rjmp	.+128    	; 0xb54 <__stack+0x255>
			call_count_keypad = 0;;
 ad4:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <call_count_keypad>
			if(MEF_readKey(0)){
 ad8:	80 e0       	ldi	r24, 0x00	; 0
 ada:	0e 94 a7 03 	call	0x74e	; 0x74e <MEF_readKey>
 ade:	88 23       	and	r24, r24
 ae0:	c9 f1       	breq	.+114    	; 0xb54 <__stack+0x255>
				switch(password[0]){
 ae2:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <password>
 ae6:	8a 33       	cpi	r24, 0x3A	; 58
 ae8:	28 f4       	brcc	.+10     	; 0xaf4 <__stack+0x1f5>
 aea:	80 33       	cpi	r24, 0x30	; 48
 aec:	20 f5       	brcc	.+72     	; 0xb36 <__stack+0x237>
 aee:	83 32       	cpi	r24, 0x23	; 35
 af0:	e9 f0       	breq	.+58     	; 0xb2c <__stack+0x22d>
 af2:	08 95       	ret
 af4:	83 34       	cpi	r24, 0x43	; 67
 af6:	71 f5       	brne	.+92     	; 0xb54 <__stack+0x255>
					case 'C':
					// Guardar
					num = ( ((data[0] - '0')* 10) + (data[1] - '0'));
 af8:	eb e2       	ldi	r30, 0x2B	; 43
 afa:	f1 e0       	ldi	r31, 0x01	; 1
 afc:	80 81       	ld	r24, Z
 afe:	90 e0       	ldi	r25, 0x00	; 0
 b00:	c0 97       	sbiw	r24, 0x30	; 48
 b02:	91 81       	ldd	r25, Z+1	; 0x01
 b04:	88 0f       	add	r24, r24
 b06:	28 2f       	mov	r18, r24
 b08:	22 0f       	add	r18, r18
 b0a:	22 0f       	add	r18, r18
 b0c:	82 0f       	add	r24, r18
 b0e:	89 0f       	add	r24, r25
 b10:	80 53       	subi	r24, 0x30	; 48
					// dataCount == 2 significa que el usuario ingreso dos numeros
					if (dataCount == 2) {
 b12:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <__data_end>
 b16:	92 30       	cpi	r25, 0x02	; 2
 b18:	21 f4       	brne	.+8      	; 0xb22 <__stack+0x223>
						if (num >= 0 && num <= 59) {
 b1a:	8c 33       	cpi	r24, 0x3C	; 60
 b1c:	10 f4       	brcc	.+4      	; 0xb22 <__stack+0x223>
							WATCH_setSeconds(num);
 b1e:	0e 94 1a 06 	call	0xc34	; 0xc34 <WATCH_setSeconds>
						}
					}
					dataCount = 0;
 b22:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
					estado = Inicio;
 b26:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <estado>
					break;
 b2a:	08 95       	ret
					case '#':
					// Cancelar.
					estado = Inicio;
 b2c:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <estado>
					dataCount = 0;
 b30:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
					break;
 b34:	08 95       	ret
					case '5':
					case '6':
					case '7':
					case '8':
					case '9':
					if(dataCount < 2) {
 b36:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <__data_end>
 b3a:	e2 30       	cpi	r30, 0x02	; 2
 b3c:	58 f4       	brcc	.+22     	; 0xb54 <__stack+0x255>
						data[dataCount] = password[0];
 b3e:	f0 e0       	ldi	r31, 0x00	; 0
 b40:	e5 5d       	subi	r30, 0xD5	; 213
 b42:	fe 4f       	sbci	r31, 0xFE	; 254
 b44:	80 83       	st	Z, r24
						LCDsendChar(data[dataCount]);
 b46:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDsendChar>
						dataCount++;
 b4a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 b4e:	8f 5f       	subi	r24, 0xFF	; 255
 b50:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
 b54:	08 95       	ret

00000b56 <TIMER0_Init>:
 b56:	8a b1       	in	r24, 0x0a	; 10
 b58:	80 64       	ori	r24, 0x40	; 64
 b5a:	8a b9       	out	0x0a, r24	; 10
 b5c:	89 ef       	ldi	r24, 0xF9	; 249
 b5e:	87 bd       	out	0x27, r24	; 39
 b60:	82 e4       	ldi	r24, 0x42	; 66
 b62:	84 bd       	out	0x24, r24	; 36
 b64:	85 b5       	in	r24, 0x25	; 37
 b66:	84 60       	ori	r24, 0x04	; 4
 b68:	85 bd       	out	0x25, r24	; 37
 b6a:	82 e0       	ldi	r24, 0x02	; 2
 b6c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 b70:	78 94       	sei
 b72:	08 95       	ret

00000b74 <__vector_14>:
 b74:	1f 92       	push	r1
 b76:	0f 92       	push	r0
 b78:	0f b6       	in	r0, 0x3f	; 63
 b7a:	0f 92       	push	r0
 b7c:	11 24       	eor	r1, r1
 b7e:	8f 93       	push	r24
 b80:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <count_MEF.1932>
 b84:	8f 5f       	subi	r24, 0xFF	; 255
 b86:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <count_MEF.1932>
 b8a:	89 31       	cpi	r24, 0x19	; 25
 b8c:	29 f4       	brne	.+10     	; 0xb98 <__vector_14+0x24>
 b8e:	81 e0       	ldi	r24, 0x01	; 1
 b90:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <FLAG_MEF>
 b94:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <count_MEF.1932>
 b98:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <count_WATCH.1933>
 b9c:	8f 5f       	subi	r24, 0xFF	; 255
 b9e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <count_WATCH.1933>
 ba2:	8a 3f       	cpi	r24, 0xFA	; 250
 ba4:	29 f4       	brne	.+10     	; 0xbb0 <__vector_14+0x3c>
 ba6:	81 e0       	ldi	r24, 0x01	; 1
 ba8:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <FLAG_WATCH>
 bac:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <count_WATCH.1933>
 bb0:	8f 91       	pop	r24
 bb2:	0f 90       	pop	r0
 bb4:	0f be       	out	0x3f, r0	; 63
 bb6:	0f 90       	pop	r0
 bb8:	1f 90       	pop	r1
 bba:	18 95       	reti

00000bbc <sEOS_Dispatch_Tasks>:
 bbc:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <FLAG_WATCH>
 bc0:	88 23       	and	r24, r24
 bc2:	21 f0       	breq	.+8      	; 0xbcc <sEOS_Dispatch_Tasks+0x10>
 bc4:	0e 94 ef 05 	call	0xbde	; 0xbde <WATCH_update>
 bc8:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <FLAG_WATCH>
 bcc:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <FLAG_MEF>
 bd0:	88 23       	and	r24, r24
 bd2:	21 f0       	breq	.+8      	; 0xbdc <sEOS_Dispatch_Tasks+0x20>
 bd4:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <MEF_update>
 bd8:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <FLAG_MEF>
 bdc:	08 95       	ret

00000bde <WATCH_update>:
 bde:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <seg>
 be2:	8f 5f       	subi	r24, 0xFF	; 255
 be4:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <seg>
 be8:	8c 33       	cpi	r24, 0x3C	; 60
 bea:	a0 f0       	brcs	.+40     	; 0xc14 <WATCH_update+0x36>
 bec:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <seg>
 bf0:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <min>
 bf4:	8f 5f       	subi	r24, 0xFF	; 255
 bf6:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <min>
 bfa:	8c 33       	cpi	r24, 0x3C	; 60
 bfc:	58 f0       	brcs	.+22     	; 0xc14 <WATCH_update+0x36>
 bfe:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <min>
 c02:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <hour>
 c06:	8f 5f       	subi	r24, 0xFF	; 255
 c08:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <hour>
 c0c:	88 31       	cpi	r24, 0x18	; 24
 c0e:	10 f0       	brcs	.+4      	; 0xc14 <WATCH_update+0x36>
 c10:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <hour>
 c14:	08 95       	ret

00000c16 <WATCH_getSeg>:
 c16:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <seg>
 c1a:	08 95       	ret

00000c1c <WATCH_getMin>:
 c1c:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <min>
 c20:	08 95       	ret

00000c22 <WATCH_getHour>:
 c22:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <hour>
 c26:	08 95       	ret

00000c28 <WATCH_setHour>:
 c28:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <hour>
 c2c:	08 95       	ret

00000c2e <WATCH_setMinutes>:
 c2e:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <min>
 c32:	08 95       	ret

00000c34 <WATCH_setSeconds>:
 c34:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <seg>
 c38:	08 95       	ret

00000c3a <__divmodhi4>:
 c3a:	97 fb       	bst	r25, 7
 c3c:	07 2e       	mov	r0, r23
 c3e:	16 f4       	brtc	.+4      	; 0xc44 <__divmodhi4+0xa>
 c40:	00 94       	com	r0
 c42:	07 d0       	rcall	.+14     	; 0xc52 <__divmodhi4_neg1>
 c44:	77 fd       	sbrc	r23, 7
 c46:	09 d0       	rcall	.+18     	; 0xc5a <__divmodhi4_neg2>
 c48:	0e 94 37 06 	call	0xc6e	; 0xc6e <__udivmodhi4>
 c4c:	07 fc       	sbrc	r0, 7
 c4e:	05 d0       	rcall	.+10     	; 0xc5a <__divmodhi4_neg2>
 c50:	3e f4       	brtc	.+14     	; 0xc60 <__divmodhi4_exit>

00000c52 <__divmodhi4_neg1>:
 c52:	90 95       	com	r25
 c54:	81 95       	neg	r24
 c56:	9f 4f       	sbci	r25, 0xFF	; 255
 c58:	08 95       	ret

00000c5a <__divmodhi4_neg2>:
 c5a:	70 95       	com	r23
 c5c:	61 95       	neg	r22
 c5e:	7f 4f       	sbci	r23, 0xFF	; 255

00000c60 <__divmodhi4_exit>:
 c60:	08 95       	ret

00000c62 <__tablejump2__>:
 c62:	ee 0f       	add	r30, r30
 c64:	ff 1f       	adc	r31, r31
 c66:	05 90       	lpm	r0, Z+
 c68:	f4 91       	lpm	r31, Z
 c6a:	e0 2d       	mov	r30, r0
 c6c:	09 94       	ijmp

00000c6e <__udivmodhi4>:
 c6e:	aa 1b       	sub	r26, r26
 c70:	bb 1b       	sub	r27, r27
 c72:	51 e1       	ldi	r21, 0x11	; 17
 c74:	07 c0       	rjmp	.+14     	; 0xc84 <__udivmodhi4_ep>

00000c76 <__udivmodhi4_loop>:
 c76:	aa 1f       	adc	r26, r26
 c78:	bb 1f       	adc	r27, r27
 c7a:	a6 17       	cp	r26, r22
 c7c:	b7 07       	cpc	r27, r23
 c7e:	10 f0       	brcs	.+4      	; 0xc84 <__udivmodhi4_ep>
 c80:	a6 1b       	sub	r26, r22
 c82:	b7 0b       	sbc	r27, r23

00000c84 <__udivmodhi4_ep>:
 c84:	88 1f       	adc	r24, r24
 c86:	99 1f       	adc	r25, r25
 c88:	5a 95       	dec	r21
 c8a:	a9 f7       	brne	.-22     	; 0xc76 <__udivmodhi4_loop>
 c8c:	80 95       	com	r24
 c8e:	90 95       	com	r25
 c90:	bc 01       	movw	r22, r24
 c92:	cd 01       	movw	r24, r26
 c94:	08 95       	ret

00000c96 <_exit>:
 c96:	f8 94       	cli

00000c98 <__stop_program>:
 c98:	ff cf       	rjmp	.-2      	; 0xc98 <__stop_program>
