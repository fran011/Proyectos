
Entregable4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000468  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800100  00800100  000004dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000050c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000db7  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ae  00000000  00000000  0000140b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007d6  00000000  00000000  00001db9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00002590  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000590  00000000  00000000  00002730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000fa  00000000  00000000  00002cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00002dba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 0c 02 	jmp	0x418	; 0x418 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 30       	cpi	r26, 0x0B	; 11
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c9 00 	call	0x192	; 0x192 <main>
  9e:	0c 94 32 02 	jmp	0x464	; 0x464 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	83 60       	ori	r24, 0x03	; 3
  ae:	80 83       	st	Z, r24
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
  b6:	80 81       	ld	r24, Z
  b8:	8f 7d       	andi	r24, 0xDF	; 223
  ba:	80 83       	st	Z, r24
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	87 60       	ori	r24, 0x07	; 7
  c4:	80 83       	st	Z, r24
  c6:	ee e7       	ldi	r30, 0x7E	; 126
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	88 60       	ori	r24, 0x08	; 8
  ce:	80 83       	st	Z, r24
  d0:	87 b1       	in	r24, 0x07	; 7
  d2:	87 7f       	andi	r24, 0xF7	; 247
  d4:	87 b9       	out	0x07, r24	; 7
  d6:	08 95       	ret

000000d8 <ADC_Enable>:
  d8:	ea e7       	ldi	r30, 0x7A	; 122
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret

000000e4 <ADC_Start_Conversion>:
  e4:	ea e7       	ldi	r30, 0x7A	; 122
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	80 83       	st	Z, r24
  ee:	08 95       	ret

000000f0 <ADC_GetResult>:
  f0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  f4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  f8:	08 95       	ret

000000fa <LED_Update>:

void LED_Update(uint8_t direction){
	static call_count_led=0;
	static uint8_t aux;
	static uint8_t pwm_value=0;
	if (direction == 1){
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	21 f5       	brne	.+72     	; 0x146 <LED_Update+0x4c>
		if(OCR1A > BLUE_BRIGHT){
  fe:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 102:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 106:	89 2b       	or	r24, r25
 108:	39 f0       	breq	.+14     	; 0x118 <LED_Update+0x1e>
			OCR1A-=5;
 10a:	e8 e8       	ldi	r30, 0x88	; 136
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	91 81       	ldd	r25, Z+1	; 0x01
 112:	05 97       	sbiw	r24, 0x05	; 5
 114:	91 83       	std	Z+1, r25	; 0x01
 116:	80 83       	st	Z, r24
		}
		if(OCR1B > GREEN_BRIGHT){
 118:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 11c:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 120:	89 2b       	or	r24, r25
 122:	39 f0       	breq	.+14     	; 0x132 <LED_Update+0x38>
			OCR1B-=5;
 124:	ea e8       	ldi	r30, 0x8A	; 138
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	91 81       	ldd	r25, Z+1	; 0x01
 12c:	05 97       	sbiw	r24, 0x05	; 5
 12e:	91 83       	std	Z+1, r25	; 0x01
 130:	80 83       	st	Z, r24
		}
		if (get_pwm_soft_value() < RED_BRIGHT)
 132:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_pwm_soft_value>
 136:	8a 3f       	cpi	r24, 0xFA	; 250
 138:	58 f5       	brcc	.+86     	; 0x190 <LED_Update+0x96>
		{
			pwm_value = get_pwm_soft_value();
 13a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_pwm_soft_value>
			set_pwm_soft_value(pwm_value + 5);
 13e:	8b 5f       	subi	r24, 0xFB	; 251
 140:	0e 94 f5 01 	call	0x3ea	; 0x3ea <set_pwm_soft_value>
 144:	08 95       	ret
		}

	} else {
			if(OCR1A < 255){
 146:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 14a:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 14e:	8f 3f       	cpi	r24, 0xFF	; 255
 150:	91 05       	cpc	r25, r1
 152:	38 f4       	brcc	.+14     	; 0x162 <LED_Update+0x68>
				OCR1A+=5;
 154:	e8 e8       	ldi	r30, 0x88	; 136
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	91 81       	ldd	r25, Z+1	; 0x01
 15c:	05 96       	adiw	r24, 0x05	; 5
 15e:	91 83       	std	Z+1, r25	; 0x01
 160:	80 83       	st	Z, r24
			}
			if(OCR1B < 255){
 162:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 166:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 16a:	8f 3f       	cpi	r24, 0xFF	; 255
 16c:	91 05       	cpc	r25, r1
 16e:	38 f4       	brcc	.+14     	; 0x17e <LED_Update+0x84>
				OCR1B+=5;
 170:	ea e8       	ldi	r30, 0x8A	; 138
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	91 81       	ldd	r25, Z+1	; 0x01
 178:	05 96       	adiw	r24, 0x05	; 5
 17a:	91 83       	std	Z+1, r25	; 0x01
 17c:	80 83       	st	Z, r24
			}
			if (get_pwm_soft_value() > 1)
 17e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_pwm_soft_value>
 182:	82 30       	cpi	r24, 0x02	; 2
 184:	28 f0       	brcs	.+10     	; 0x190 <LED_Update+0x96>
			{
				pwm_value = get_pwm_soft_value();
 186:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_pwm_soft_value>
				set_pwm_soft_value(pwm_value - 5);
 18a:	85 50       	subi	r24, 0x05	; 5
 18c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <set_pwm_soft_value>
 190:	08 95       	ret

00000192 <main>:


int main(void)
{
	
	MEF_Init();
 192:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <MEF_Init>
	ADC_Init();
 196:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	TIMER0_INIT();
 19a:	0e 94 9d 01 	call	0x33a	; 0x33a <TIMER0_INIT>
	TIMER1_INIT();
 19e:	0e 94 af 01 	call	0x35e	; 0x35e <TIMER1_INIT>
	PWM_START;
 1a2:	84 b1       	in	r24, 0x04	; 4
 1a4:	80 62       	ori	r24, 0x20	; 32
 1a6:	84 b9       	out	0x04, r24	; 4
	ADC_Enable();
 1a8:	0e 94 6c 00 	call	0xd8	; 0xd8 <ADC_Enable>
	static uint16_t result;
	ADC_Start_Conversion(); //ADCSRA |= (1<<ADSC);
 1ac:	0e 94 72 00 	call	0xe4	; 0xe4 <ADC_Start_Conversion>
	
    while (1) 
    { 
		
		while((ADCSRA&(1<<ADIF))==0); //wait for end of conversion
 1b0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1b4:	84 ff       	sbrs	r24, 4
 1b6:	fc cf       	rjmp	.-8      	; 0x1b0 <main+0x1e>
		ADCSRA |= (1<<ADIF);
 1b8:	ea e7       	ldi	r30, 0x7A	; 122
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	80 61       	ori	r24, 0x10	; 16
 1c0:	80 83       	st	Z, r24
		result = ADC_GetResult(); 
 1c2:	0e 94 78 00 	call	0xf0	; 0xf0 <ADC_GetResult>
		Dispatch_Tasks(result);
 1c6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Dispatch_Tasks>
		
		ADC_Start_Conversion(); //ADCSRA |= (1<<ADSC);
 1ca:	0e 94 72 00 	call	0xe4	; 0xe4 <ADC_Start_Conversion>
		
		

		
    }
 1ce:	f0 cf       	rjmp	.-32     	; 0x1b0 <main+0x1e>

000001d0 <MEF_Init>:
static uint8_t pwm_value=0;
uint8_t flicker_period=0;
static uint8_t luz;

void MEF_Init(){
	OCR1A=0;
 1d0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1d4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B=0;
 1d8:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1dc:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	PORTB |= (1<<PORTB1);
 1e0:	85 b1       	in	r24, 0x05	; 5
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1<<PORTB2);
 1e6:	85 b1       	in	r24, 0x05	; 5
 1e8:	84 60       	ori	r24, 0x04	; 4
 1ea:	85 b9       	out	0x05, r24	; 5
	
	estado_act=APAGADO;	
 1ec:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <estado_act>
 1f0:	08 95       	ret

000001f2 <MEF_Update>:
}

void MEF_Update(uint16_t adc1){		//Cada 8ms
	if(adc1 > 980){
 1f2:	85 3d       	cpi	r24, 0xD5	; 213
 1f4:	93 40       	sbci	r25, 0x03	; 3
 1f6:	20 f0       	brcs	.+8      	; 0x200 <MEF_Update+0xe>
		luz=1;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <MEF_Update+0x12>
	} else {
		luz=0;
 200:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	switch (estado_act){
 204:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <estado_act>
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	09 f4       	brne	.+2      	; 0x20e <MEF_Update+0x1c>
 20c:	6a c0       	rjmp	.+212    	; 0x2e2 <MEF_Update+0xf0>
 20e:	30 f0       	brcs	.+12     	; 0x21c <MEF_Update+0x2a>
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	d9 f1       	breq	.+118    	; 0x28a <MEF_Update+0x98>
 214:	83 30       	cpi	r24, 0x03	; 3
 216:	09 f4       	brne	.+2      	; 0x21a <MEF_Update+0x28>
 218:	4f c0       	rjmp	.+158    	; 0x2b8 <MEF_Update+0xc6>
 21a:	08 95       	ret
		case APAGADO:
		OCR1A=255;
 21c:	8f ef       	ldi	r24, 0xFF	; 255
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 224:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B=255;
 228:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 22c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		if (luz == 1){
 230:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	a1 f4       	brne	.+40     	; 0x260 <MEF_Update+0x6e>
			if(++call_count_mef == 1){			//0.5 seg apagado
 238:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <call_count_mef>
 23c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <call_count_mef+0x1>
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <call_count_mef+0x1>
 246:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <call_count_mef>
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	09 f0       	breq	.+2      	; 0x250 <MEF_Update+0x5e>
 24e:	74 c0       	rjmp	.+232    	; 0x338 <MEF_Update+0x146>
				call_count_mef=0;
 250:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <call_count_mef+0x1>
 254:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <call_count_mef>
				estado_act=TRANSICION1;
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <estado_act>
 25e:	08 95       	ret
			}
		} else {
			if(++call_count_mef == 375){			//1 seg apagado
 260:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <call_count_mef>
 264:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <call_count_mef+0x1>
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <call_count_mef+0x1>
 26e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <call_count_mef>
 272:	87 37       	cpi	r24, 0x77	; 119
 274:	91 40       	sbci	r25, 0x01	; 1
 276:	09 f0       	breq	.+2      	; 0x27a <MEF_Update+0x88>
 278:	5f c0       	rjmp	.+190    	; 0x338 <MEF_Update+0x146>
				call_count_mef=0;
 27a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <call_count_mef+0x1>
 27e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <call_count_mef>
				estado_act=TRANSICION1;
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <estado_act>
 288:	08 95       	ret
			}
			
		break;
		case TRANSICION1:
				
				LED_Update(1);
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	0e 94 7d 00 	call	0xfa	; 0xfa <LED_Update>
			
				if(++call_count_mef == 63 ){  //500 ms
 290:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <call_count_mef>
 294:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <call_count_mef+0x1>
 298:	01 96       	adiw	r24, 0x01	; 1
 29a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <call_count_mef+0x1>
 29e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <call_count_mef>
 2a2:	cf 97       	sbiw	r24, 0x3f	; 63
 2a4:	09 f0       	breq	.+2      	; 0x2a8 <MEF_Update+0xb6>
 2a6:	48 c0       	rjmp	.+144    	; 0x338 <MEF_Update+0x146>
					call_count_mef = 0;
 2a8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <call_count_mef+0x1>
 2ac:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <call_count_mef>
					estado_act = MAX;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <estado_act>
 2b6:	08 95       	ret
				
		break;
		
		case TRANSICION2:
			
				LED_Update(0);
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	0e 94 7d 00 	call	0xfa	; 0xfa <LED_Update>
				if(++call_count_mef == 63 ){ //500 ms
 2be:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <call_count_mef>
 2c2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <call_count_mef+0x1>
 2c6:	01 96       	adiw	r24, 0x01	; 1
 2c8:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <call_count_mef+0x1>
 2cc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <call_count_mef>
 2d0:	cf 97       	sbiw	r24, 0x3f	; 63
 2d2:	91 f5       	brne	.+100    	; 0x338 <MEF_Update+0x146>
					call_count_mef = 0;
 2d4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <call_count_mef+0x1>
 2d8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <call_count_mef>
					estado_act = APAGADO;
 2dc:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <estado_act>
 2e0:	08 95       	ret
				}
		break;
		
		case MAX:
		if (luz == 1){
 2e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2e6:	81 30       	cpi	r24, 0x01	; 1
 2e8:	a1 f4       	brne	.+40     	; 0x312 <MEF_Update+0x120>
			if(++call_count_mef == 125){
 2ea:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <call_count_mef>
 2ee:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <call_count_mef+0x1>
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <call_count_mef+0x1>
 2f8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <call_count_mef>
 2fc:	8d 37       	cpi	r24, 0x7D	; 125
 2fe:	91 05       	cpc	r25, r1
 300:	d9 f4       	brne	.+54     	; 0x338 <MEF_Update+0x146>
				call_count_mef = 0;
 302:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <call_count_mef+0x1>
 306:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <call_count_mef>
				estado_act = TRANSICION2;
 30a:	83 e0       	ldi	r24, 0x03	; 3
 30c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <estado_act>
 310:	08 95       	ret
			}
		} else {
			if(++call_count_mef == 125){
 312:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <call_count_mef>
 316:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <call_count_mef+0x1>
 31a:	01 96       	adiw	r24, 0x01	; 1
 31c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <call_count_mef+0x1>
 320:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <call_count_mef>
 324:	8d 37       	cpi	r24, 0x7D	; 125
 326:	91 05       	cpc	r25, r1
 328:	39 f4       	brne	.+14     	; 0x338 <MEF_Update+0x146>
				call_count_mef = 0;
 32a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <call_count_mef+0x1>
 32e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <call_count_mef>
				estado_act = TRANSICION2;
 332:	83 e0       	ldi	r24, 0x03	; 3
 334:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <estado_act>
 338:	08 95       	ret

0000033a <TIMER0_INIT>:
void set_ocr1a(uint8_t value){
	OCR1A=value;
}

void set_ocr1b(uint8_t value){
	OCR1B=value;
 33a:	8a b1       	in	r24, 0x0a	; 10
 33c:	80 64       	ori	r24, 0x40	; 64
 33e:	8a b9       	out	0x0a, r24	; 10
 340:	84 b5       	in	r24, 0x24	; 36
 342:	82 64       	ori	r24, 0x42	; 66
 344:	84 bd       	out	0x24, r24	; 36
 346:	85 b5       	in	r24, 0x25	; 37
 348:	81 60       	ori	r24, 0x01	; 1
 34a:	85 bd       	out	0x25, r24	; 37
 34c:	84 e1       	ldi	r24, 0x14	; 20
 34e:	87 bd       	out	0x27, r24	; 39
 350:	ee e6       	ldi	r30, 0x6E	; 110
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	82 60       	ori	r24, 0x02	; 2
 358:	80 83       	st	Z, r24
 35a:	78 94       	sei
 35c:	08 95       	ret

0000035e <TIMER1_INIT>:
 35e:	e0 e8       	ldi	r30, 0x80	; 128
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	81 60       	ori	r24, 0x01	; 1
 366:	80 83       	st	Z, r24
 368:	a1 e8       	ldi	r26, 0x81	; 129
 36a:	b0 e0       	ldi	r27, 0x00	; 0
 36c:	8c 91       	ld	r24, X
 36e:	88 60       	ori	r24, 0x08	; 8
 370:	8c 93       	st	X, r24
 372:	80 81       	ld	r24, Z
 374:	80 68       	ori	r24, 0x80	; 128
 376:	80 83       	st	Z, r24
 378:	80 81       	ld	r24, Z
 37a:	80 62       	ori	r24, 0x20	; 32
 37c:	80 83       	st	Z, r24
 37e:	8c 91       	ld	r24, X
 380:	83 60       	ori	r24, 0x03	; 3
 382:	8c 93       	st	X, r24
 384:	84 b1       	in	r24, 0x04	; 4
 386:	84 60       	ori	r24, 0x04	; 4
 388:	84 b9       	out	0x04, r24	; 4
 38a:	84 b1       	in	r24, 0x04	; 4
 38c:	82 60       	ori	r24, 0x02	; 2
 38e:	84 b9       	out	0x04, r24	; 4
 390:	8f ef       	ldi	r24, 0xFF	; 255
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 398:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 39c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 3a0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 3a4:	08 95       	ret

000003a6 <PWM_soft_update>:
 3a6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <PWM_position.1764>
 3aa:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <PWM_position.1764+0x1>
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <PWM_position.1764+0x1>
 3b4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <PWM_position.1764>
 3b8:	8f 3f       	cpi	r24, 0xFF	; 255
 3ba:	91 05       	cpc	r25, r1
 3bc:	40 f0       	brcs	.+16     	; 0x3ce <PWM_soft_update+0x28>
 3be:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <PWM_position.1764+0x1>
 3c2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <PWM_position.1764>
 3c6:	85 b1       	in	r24, 0x05	; 5
 3c8:	80 62       	ori	r24, 0x20	; 32
 3ca:	85 b9       	out	0x05, r24	; 5
 3cc:	08 95       	ret
 3ce:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <PWM_DELTA>
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	82 17       	cp	r24, r18
 3d6:	93 07       	cpc	r25, r19
 3d8:	20 f4       	brcc	.+8      	; 0x3e2 <PWM_soft_update+0x3c>
 3da:	85 b1       	in	r24, 0x05	; 5
 3dc:	8f 7d       	andi	r24, 0xDF	; 223
 3de:	85 b9       	out	0x05, r24	; 5
 3e0:	08 95       	ret
 3e2:	85 b1       	in	r24, 0x05	; 5
 3e4:	80 62       	ori	r24, 0x20	; 32
 3e6:	85 b9       	out	0x05, r24	; 5
 3e8:	08 95       	ret

000003ea <set_pwm_soft_value>:
}

void set_pwm_soft_value(uint8_t value){
	PWM_DELTA = value;
 3ea:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <PWM_DELTA>
 3ee:	08 95       	ret

000003f0 <get_pwm_soft_value>:
}

uint8_t get_pwm_soft_value(){
	return PWM_DELTA;
}
 3f0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <PWM_DELTA>
 3f4:	08 95       	ret

000003f6 <Dispatch_Tasks>:

void Dispatch_Tasks(uint16_t adc1){
	if (flag_mef){
 3f6:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <flag_mef>
 3fa:	22 23       	and	r18, r18
 3fc:	21 f0       	breq	.+8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		MEF_Update(adc1);
 3fe:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <MEF_Update>
		flag_mef=0;
 402:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <flag_mef>
	}
	if(flag_pwm){
 406:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <flag_pwm>
 40a:	88 23       	and	r24, r24
 40c:	21 f0       	breq	.+8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
		PWM_soft_update();
 40e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <PWM_soft_update>
		flag_pwm=0;
 412:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <flag_pwm>
 416:	08 95       	ret

00000418 <__vector_14>:
	}
}


ISR (TIMER0_COMPA_vect){ //8us
 418:	1f 92       	push	r1
 41a:	0f 92       	push	r0
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	0f 92       	push	r0
 420:	11 24       	eor	r1, r1
 422:	2f 93       	push	r18
 424:	8f 93       	push	r24
 426:	9f 93       	push	r25
	static uint16_t call_count = 0;
	if(++call_count == 1000){		//8 ms
 428:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <call_count.1784>
 42c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <call_count.1784+0x1>
 430:	01 96       	adiw	r24, 0x01	; 1
 432:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <call_count.1784+0x1>
 436:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <call_count.1784>
 43a:	88 3e       	cpi	r24, 0xE8	; 232
 43c:	93 40       	sbci	r25, 0x03	; 3
 43e:	39 f4       	brne	.+14     	; 0x44e <__vector_14+0x36>
		flag_mef=1;
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <flag_mef>
		call_count=0;
 446:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <call_count.1784+0x1>
 44a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <call_count.1784>
	}
	flag_pwm=1;
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <flag_pwm>

 454:	9f 91       	pop	r25
 456:	8f 91       	pop	r24
 458:	2f 91       	pop	r18
 45a:	0f 90       	pop	r0
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	0f 90       	pop	r0
 460:	1f 90       	pop	r1
 462:	18 95       	reti

00000464 <_exit>:
 464:	f8 94       	cli

00000466 <__stop_program>:
 466:	ff cf       	rjmp	.-2      	; 0x466 <__stop_program>
