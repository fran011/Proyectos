
TP4-EJ1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000462  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  00000462  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000462  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d33  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000984  00000000  00000000  0000130f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000077c  00000000  00000000  00001c93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00002410  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052a  00000000  00000000  000025a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e0  00000000  00000000  00002ace  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00002bae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ee       	ldi	r30, 0xEE	; 238
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 30       	cpi	r26, 0x09	; 9
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b7 00 	call	0x16e	; 0x16e <main>
  9e:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
	
	ADCSRA |= (1<<ADEN);	//Habilitar conversor ADC 
}

void ADC_Disable(){
	ADCSRA &= ~(1<<ADEN); //Deshabilitar conversor ADC
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	83 60       	ori	r24, 0x03	; 3
  ae:	80 83       	st	Z, r24
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
  b6:	80 81       	ld	r24, Z
  b8:	8f 7d       	andi	r24, 0xDF	; 223
  ba:	80 83       	st	Z, r24
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	87 60       	ori	r24, 0x07	; 7
  c4:	80 83       	st	Z, r24
  c6:	ee e7       	ldi	r30, 0x7E	; 126
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	88 60       	ori	r24, 0x08	; 8
  ce:	80 83       	st	Z, r24
  d0:	87 b1       	in	r24, 0x07	; 7
  d2:	87 7f       	andi	r24, 0xF7	; 247
  d4:	87 b9       	out	0x07, r24	; 7
  d6:	08 95       	ret

000000d8 <ADC_Enable>:
  d8:	ea e7       	ldi	r30, 0x7A	; 122
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret

000000e4 <ADC_Start_Conversion>:
}

void ADC_Start_Conversion(){
	
	ADCSRA |= (1<<ADSC); // Start conversion
  e4:	ea e7       	ldi	r30, 0x7A	; 122
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	80 83       	st	Z, r24
  ee:	08 95       	ret

000000f0 <ADC_GetResult>:
}

uint16_t ADC_GetResult()
{
	uint16_t aux=ADC;
  f0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  f4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	return aux;
}
  f8:	08 95       	ret

000000fa <LED_Update>:
static uint8_t auxA=255;
static uint8_t auxB=255;

void LED_Update(uint8_t direction){
	static uint8_t aux;
	if (direction == 1){
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	e9 f4       	brne	.+58     	; 0x138 <LED_Update+0x3e>
		if(OCR1A < BLUE_BRIGHT){
  fe:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 102:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 106:	8c 3d       	cpi	r24, 0xDC	; 220
 108:	91 05       	cpc	r25, r1
 10a:	38 f4       	brcc	.+14     	; 0x11a <LED_Update+0x20>
			OCR1A++;
 10c:	e8 e8       	ldi	r30, 0x88	; 136
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	91 81       	ldd	r25, Z+1	; 0x01
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	91 83       	std	Z+1, r25	; 0x01
 118:	80 83       	st	Z, r24
		}
		if(OCR1B < GREEN_BRIGHT){
 11a:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 11e:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 122:	8e 36       	cpi	r24, 0x6E	; 110
 124:	91 05       	cpc	r25, r1
 126:	10 f5       	brcc	.+68     	; 0x16c <LED_Update+0x72>
			OCR1B++;
 128:	ea e8       	ldi	r30, 0x8A	; 138
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	91 81       	ldd	r25, Z+1	; 0x01
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	91 83       	std	Z+1, r25	; 0x01
 134:	80 83       	st	Z, r24
 136:	08 95       	ret
		}	
	} else {
			if(OCR1A > 1){
 138:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 13c:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 140:	02 97       	sbiw	r24, 0x02	; 2
 142:	38 f0       	brcs	.+14     	; 0x152 <LED_Update+0x58>
				OCR1A--;
 144:	e8 e8       	ldi	r30, 0x88	; 136
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	91 81       	ldd	r25, Z+1	; 0x01
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	91 83       	std	Z+1, r25	; 0x01
 150:	80 83       	st	Z, r24
			}
			if(OCR1B > 1){
 152:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 156:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 15a:	02 97       	sbiw	r24, 0x02	; 2
 15c:	38 f0       	brcs	.+14     	; 0x16c <LED_Update+0x72>
				OCR1B--;
 15e:	ea e8       	ldi	r30, 0x8A	; 138
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	91 81       	ldd	r25, Z+1	; 0x01
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	91 83       	std	Z+1, r25	; 0x01
 16a:	80 83       	st	Z, r24
 16c:	08 95       	ret

0000016e <main>:



int main(void)
{
	MEF_Init();
 16e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <MEF_Init>
	ADC_Init();
 172:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	TIMER0_INIT();
 176:	0e 94 80 01 	call	0x300	; 0x300 <TIMER0_INIT>
	TIMER1_INIT();
 17a:	0e 94 8f 01 	call	0x31e	; 0x31e <TIMER1_INIT>
	PWM_START;
 17e:	84 b1       	in	r24, 0x04	; 4
 180:	80 62       	ori	r24, 0x20	; 32
 182:	84 b9       	out	0x04, r24	; 4
	ADC_Enable();
 184:	0e 94 6c 00 	call	0xd8	; 0xd8 <ADC_Enable>
	static uint16_t result;

	ADC_Start_Conversion(); //ADCSRA |= (1<<ADSC);
 188:	0e 94 72 00 	call	0xe4	; 0xe4 <ADC_Start_Conversion>
    while (1) 
    {
		while((ADCSRA&(1<<ADIF))==0); //wait for end of conversion
 18c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 190:	84 ff       	sbrs	r24, 4
 192:	fc cf       	rjmp	.-8      	; 0x18c <main+0x1e>
		ADCSRA |= (1<<ADIF);
 194:	ea e7       	ldi	r30, 0x7A	; 122
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	80 61       	ori	r24, 0x10	; 16
 19c:	80 83       	st	Z, r24
		result = ADC_GetResult(); 
 19e:	0e 94 78 00 	call	0xf0	; 0xf0 <ADC_GetResult>
		Dispatch_Tasks(result);
 1a2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <Dispatch_Tasks>
		ADC_Start_Conversion(); //ADCSRA |= (1<<ADSC);
 1a6:	0e 94 72 00 	call	0xe4	; 0xe4 <ADC_Start_Conversion>
		
    }
 1aa:	f0 cf       	rjmp	.-32     	; 0x18c <main+0x1e>

000001ac <MEF_Init>:
static uint16_t call_count_mef=0;
uint8_t flicker_period=0;
static uint8_t luz;

void MEF_Init(){
	OCR1A=255;
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1b4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B=255;
 1b8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1bc:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	estado_act=APAGADO;	
 1c0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <estado_act>
 1c4:	08 95       	ret

000001c6 <MEF_Update>:
}

void MEF_Update(uint16_t adc1){		//Cada 1ms
	if(adc1 > 1000){
 1c6:	89 3e       	cpi	r24, 0xE9	; 233
 1c8:	93 40       	sbci	r25, 0x03	; 3
 1ca:	20 f0       	brcs	.+8      	; 0x1d4 <MEF_Update+0xe>
		luz=1;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <MEF_Update+0x12>
	} else {
		luz=0;
 1d4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	switch (estado_act){
 1d8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <estado_act>
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	09 f4       	brne	.+2      	; 0x1e2 <MEF_Update+0x1c>
 1e0:	63 c0       	rjmp	.+198    	; 0x2a8 <MEF_Update+0xe2>
 1e2:	30 f0       	brcs	.+12     	; 0x1f0 <MEF_Update+0x2a>
 1e4:	82 30       	cpi	r24, 0x02	; 2
 1e6:	91 f1       	breq	.+100    	; 0x24c <MEF_Update+0x86>
 1e8:	83 30       	cpi	r24, 0x03	; 3
 1ea:	09 f4       	brne	.+2      	; 0x1ee <MEF_Update+0x28>
 1ec:	47 c0       	rjmp	.+142    	; 0x27c <MEF_Update+0xb6>
 1ee:	08 95       	ret
		case APAGADO:
		//OCR1A=255;
		//OCR1B=255;
		if (luz == 1){
 1f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	a9 f4       	brne	.+42     	; 0x222 <MEF_Update+0x5c>
			if(++call_count_mef == 1000){			//1 seg apagado
 1f8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <call_count_mef>
 1fc:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <call_count_mef+0x1>
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <call_count_mef+0x1>
 206:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <call_count_mef>
 20a:	88 3e       	cpi	r24, 0xE8	; 232
 20c:	93 40       	sbci	r25, 0x03	; 3
 20e:	09 f0       	breq	.+2      	; 0x212 <MEF_Update+0x4c>
 210:	76 c0       	rjmp	.+236    	; 0x2fe <MEF_Update+0x138>
				call_count_mef=0;
 212:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <call_count_mef+0x1>
 216:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <call_count_mef>
				estado_act=TRANSICION1;
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <estado_act>
 220:	08 95       	ret
			}
		} else {
			if(++call_count_mef == 3000){			//1 seg apagado
 222:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <call_count_mef>
 226:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <call_count_mef+0x1>
 22a:	01 96       	adiw	r24, 0x01	; 1
 22c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <call_count_mef+0x1>
 230:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <call_count_mef>
 234:	88 3b       	cpi	r24, 0xB8	; 184
 236:	9b 40       	sbci	r25, 0x0B	; 11
 238:	09 f0       	breq	.+2      	; 0x23c <MEF_Update+0x76>
 23a:	61 c0       	rjmp	.+194    	; 0x2fe <MEF_Update+0x138>
				call_count_mef=0;
 23c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <call_count_mef+0x1>
 240:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <call_count_mef>
				estado_act=TRANSICION1;
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <estado_act>
 24a:	08 95       	ret
			}
			
		break;
		case TRANSICION1:
		
				LED_Update(1);
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 7d 00 	call	0xfa	; 0xfa <LED_Update>
				if(++call_count_mef == 500 ){
 252:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <call_count_mef>
 256:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <call_count_mef+0x1>
 25a:	01 96       	adiw	r24, 0x01	; 1
 25c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <call_count_mef+0x1>
 260:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <call_count_mef>
 264:	84 3f       	cpi	r24, 0xF4	; 244
 266:	91 40       	sbci	r25, 0x01	; 1
 268:	09 f0       	breq	.+2      	; 0x26c <MEF_Update+0xa6>
 26a:	49 c0       	rjmp	.+146    	; 0x2fe <MEF_Update+0x138>
					call_count_mef = 0;
 26c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <call_count_mef+0x1>
 270:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <call_count_mef>
					estado_act = MAX;
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <estado_act>
 27a:	08 95       	ret
				}
				
		break;
		
		case TRANSICION2:
				LED_Update(0);
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	0e 94 7d 00 	call	0xfa	; 0xfa <LED_Update>
				if(++call_count_mef == 500 ){
 282:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <call_count_mef>
 286:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <call_count_mef+0x1>
 28a:	01 96       	adiw	r24, 0x01	; 1
 28c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <call_count_mef+0x1>
 290:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <call_count_mef>
 294:	84 3f       	cpi	r24, 0xF4	; 244
 296:	91 40       	sbci	r25, 0x01	; 1
 298:	91 f5       	brne	.+100    	; 0x2fe <MEF_Update+0x138>
					call_count_mef = 0;
 29a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <call_count_mef+0x1>
 29e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <call_count_mef>
					estado_act = APAGADO;
 2a2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <estado_act>
 2a6:	08 95       	ret
				}
		break;
		
		case MAX:
		if (luz == 1){
 2a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	a1 f4       	brne	.+40     	; 0x2d8 <MEF_Update+0x112>
			if(++call_count_mef == 1000){
 2b0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <call_count_mef>
 2b4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <call_count_mef+0x1>
 2b8:	01 96       	adiw	r24, 0x01	; 1
 2ba:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <call_count_mef+0x1>
 2be:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <call_count_mef>
 2c2:	88 3e       	cpi	r24, 0xE8	; 232
 2c4:	93 40       	sbci	r25, 0x03	; 3
 2c6:	d9 f4       	brne	.+54     	; 0x2fe <MEF_Update+0x138>
				call_count_mef = 0;
 2c8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <call_count_mef+0x1>
 2cc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <call_count_mef>
				estado_act = TRANSICION2;
 2d0:	83 e0       	ldi	r24, 0x03	; 3
 2d2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <estado_act>
 2d6:	08 95       	ret
			}
		} else {
			if(++call_count_mef == 3000){
 2d8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <call_count_mef>
 2dc:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <call_count_mef+0x1>
 2e0:	01 96       	adiw	r24, 0x01	; 1
 2e2:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <call_count_mef+0x1>
 2e6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <call_count_mef>
 2ea:	88 3b       	cpi	r24, 0xB8	; 184
 2ec:	9b 40       	sbci	r25, 0x0B	; 11
 2ee:	39 f4       	brne	.+14     	; 0x2fe <MEF_Update+0x138>
				call_count_mef = 0;
 2f0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <call_count_mef+0x1>
 2f4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <call_count_mef>
				estado_act = TRANSICION2;
 2f8:	83 e0       	ldi	r24, 0x03	; 3
 2fa:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <estado_act>
 2fe:	08 95       	ret

00000300 <TIMER0_INIT>:
	PWM_DELTA = value;
}

uint8_t get_pwm_soft_value(){
	return PWM_DELTA;
}
 300:	84 b5       	in	r24, 0x24	; 36
 302:	82 64       	ori	r24, 0x42	; 66
 304:	84 bd       	out	0x24, r24	; 36
 306:	85 b5       	in	r24, 0x25	; 37
 308:	83 60       	ori	r24, 0x03	; 3
 30a:	85 bd       	out	0x25, r24	; 37
 30c:	88 ef       	ldi	r24, 0xF8	; 248
 30e:	87 bd       	out	0x27, r24	; 39
 310:	ee e6       	ldi	r30, 0x6E	; 110
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	82 60       	ori	r24, 0x02	; 2
 318:	80 83       	st	Z, r24
 31a:	78 94       	sei
 31c:	08 95       	ret

0000031e <TIMER1_INIT>:
 31e:	e0 e8       	ldi	r30, 0x80	; 128
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	81 60       	ori	r24, 0x01	; 1
 326:	80 83       	st	Z, r24
 328:	a1 e8       	ldi	r26, 0x81	; 129
 32a:	b0 e0       	ldi	r27, 0x00	; 0
 32c:	8c 91       	ld	r24, X
 32e:	88 60       	ori	r24, 0x08	; 8
 330:	8c 93       	st	X, r24
 332:	80 81       	ld	r24, Z
 334:	80 6c       	ori	r24, 0xC0	; 192
 336:	80 83       	st	Z, r24
 338:	80 81       	ld	r24, Z
 33a:	80 63       	ori	r24, 0x30	; 48
 33c:	80 83       	st	Z, r24
 33e:	8c 91       	ld	r24, X
 340:	83 60       	ori	r24, 0x03	; 3
 342:	8c 93       	st	X, r24
 344:	84 b1       	in	r24, 0x04	; 4
 346:	84 60       	ori	r24, 0x04	; 4
 348:	84 b9       	out	0x04, r24	; 4
 34a:	84 b1       	in	r24, 0x04	; 4
 34c:	82 60       	ori	r24, 0x02	; 2
 34e:	84 b9       	out	0x04, r24	; 4
 350:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 354:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 358:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 35c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 360:	08 95       	ret

00000362 <PWM_soft_update>:
 362:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <PWM_position.1764>
 366:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <PWM_position.1764+0x1>
 36a:	01 96       	adiw	r24, 0x01	; 1
 36c:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <PWM_position.1764+0x1>
 370:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <PWM_position.1764>
 374:	8f 3f       	cpi	r24, 0xFF	; 255
 376:	91 05       	cpc	r25, r1
 378:	40 f0       	brcs	.+16     	; 0x38a <PWM_soft_update+0x28>
 37a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <PWM_position.1764+0x1>
 37e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <PWM_position.1764>
 382:	85 b1       	in	r24, 0x05	; 5
 384:	80 62       	ori	r24, 0x20	; 32
 386:	85 b9       	out	0x05, r24	; 5
 388:	08 95       	ret
 38a:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <PWM_DELTA>
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	82 17       	cp	r24, r18
 392:	93 07       	cpc	r25, r19
 394:	20 f4       	brcc	.+8      	; 0x39e <PWM_soft_update+0x3c>
 396:	85 b1       	in	r24, 0x05	; 5
 398:	8f 7d       	andi	r24, 0xDF	; 223
 39a:	85 b9       	out	0x05, r24	; 5
 39c:	08 95       	ret
 39e:	85 b1       	in	r24, 0x05	; 5
 3a0:	80 62       	ori	r24, 0x20	; 32
 3a2:	85 b9       	out	0x05, r24	; 5
 3a4:	08 95       	ret

000003a6 <Dispatch_Tasks>:

void Dispatch_Tasks(uint16_t adc1){
	if (flag_mef){
 3a6:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <flag_mef>
 3aa:	22 23       	and	r18, r18
 3ac:	21 f0       	breq	.+8      	; 0x3b6 <Dispatch_Tasks+0x10>
		MEF_Update(adc1);
 3ae:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <MEF_Update>
		flag_mef=0;
 3b2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <flag_mef>
	}
	if(flag_pwm){
 3b6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <flag_pwm>
 3ba:	88 23       	and	r24, r24
 3bc:	21 f0       	breq	.+8      	; 0x3c6 <Dispatch_Tasks+0x20>
		PWM_soft_update();
 3be:	0e 94 b1 01 	call	0x362	; 0x362 <PWM_soft_update>
		flag_pwm=0;
 3c2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <flag_pwm>
 3c6:	08 95       	ret

000003c8 <__vector_14>:
	}
}


ISR (TIMER0_COMPA_vect){
 3c8:	1f 92       	push	r1
 3ca:	0f 92       	push	r0
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	0f 92       	push	r0
 3d0:	11 24       	eor	r1, r1
 3d2:	8f 93       	push	r24
	static uint16_t call_count = 0;
	//PWM_soft_update();
	//MEF_Update();
	flag_mef=1;
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <flag_mef>
	flag_pwm=1;
 3da:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <flag_pwm>
	/*if(++call_count == 100){
		call_count=0;
		update_led();
		
	}*/
 3de:	8f 91       	pop	r24
 3e0:	0f 90       	pop	r0
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	0f 90       	pop	r0
 3e6:	1f 90       	pop	r1
 3e8:	18 95       	reti

000003ea <_exit>:
 3ea:	f8 94       	cli

000003ec <__stop_program>:
 3ec:	ff cf       	rjmp	.-2      	; 0x3ec <__stop_program>
